using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Resources;
using Cell.Blazor._Core.Service;
using Cell.Blazor.Internal.Static;
using Newtonsoft.Json;

namespace Cell.Blazor.Internal
{
    public class LocalizerDetails : IDisposable
    {
        protected CultureInfo Culture { get; set; }

        protected List<string> LocaleKeys { get; set; }

        protected CellBlazorService SyncfusionService { get; set; }

        protected ResourceManager Manager { get; set; }

        public LocalizerDetails(
          ResourceManager value,
          CultureInfo culture,
          CellBlazorService service,
          List<string> keys)
        {
            Manager = value;
            Culture = culture;
            SyncfusionService = service;
            LocaleKeys = keys;
        }

        public string GetLocaleText()
        {
            string str = string.Empty;
            if (LocaleKeys == null)
                return str;
            string name = Intl.CurrentCulture.Name;
            if (!SyncfusionService.LoadedLocale.ContainsKey(name))
                SyncfusionService.LoadedLocale[name] = new List<string>();
            Dictionary<string, Dictionary<string, string>> componentLocale = new Dictionary<string, Dictionary<string, string>>();
            foreach (string localeKey in LocaleKeys)
            {
                if (!SyncfusionService.LoadedLocale.ContainsKey(name) || !SyncfusionService.LoadedLocale[name].Contains(localeKey))
                {
                    SyncfusionService.LoadedLocale[name].Add(localeKey);
                    GetMappingLocale(localeKey, componentLocale);
                }
            }
            if (componentLocale.Count > 0)
                str = "{\"" + Culture + "\": " + JsonConvert.SerializeObject(componentLocale) + " }";
            return str;
        }

        public string GetString(string localeKey) => Manager?.GetString(localeKey, CultureInfo.CurrentCulture);

        protected void GetMappingLocale(
          string key,
          Dictionary<string, Dictionary<string, string>> componentLocale)
        {
            Dictionary<string, string> source = new Dictionary<string, string>();
            switch (key)
            {
                case "PdfViewer":
                    source.Add("PdfViewer", GetString("PdfViewer"));
                    source.Add("Cancel", GetString("PdfViewer_Cancel"));
                    source.Add("Download file", GetString("PdfViewer_DownloadFile"));
                    source.Add("Download", GetString("PdfViewer_Download"));
                    source.Add("Enter Password", GetString("PdfViewer_EnterPassword"));
                    source.Add("File Corrupted", GetString("PdfViewer_FileCorrupted"));
                    source.Add("File Corrupted Content", GetString("PdfViewer_FileCorruptedContent"));
                    source.Add("Fit Page", GetString("PdfViewer_FitPage"));
                    source.Add("Fit Width", GetString("PdfViewer_FitWidth"));
                    source.Add("Automatic", GetString("PdfViewer_Automatic"));
                    source.Add("Go To First Page", GetString("PdfViewer_GoToFirstPage"));
                    source.Add("Invalid Password", GetString("PdfViewer_InvalidPassword"));
                    source.Add("Next Page", GetString("PdfViewer_NextPage"));
                    source.Add("OK", GetString("PdfViewer_OK"));
                    source.Add("Open", GetString("PdfViewer_Open"));
                    source.Add("Page Number", GetString("PdfViewer_PageNumber"));
                    source.Add("Previous Page", GetString("PdfViewer_PreviousPage"));
                    source.Add("Go To Last Page", GetString("PdfViewer_GoToLastPage"));
                    source.Add("Zoom", GetString("PdfViewer_Zoom"));
                    source.Add("Zoom In", GetString("PdfViewer_ZoomIn"));
                    source.Add("Zoom Out", GetString("PdfViewer_ZoomOut"));
                    source.Add("Page Thumbnails", GetString("PdfViewer_PageThumbnails"));
                    source.Add("Bookmarks", GetString("PdfViewer_Bookmarks"));
                    source.Add("Print", GetString("PdfViewer_Print"));
                    source.Add("Password Protected", GetString("PdfViewer_PasswordProtected"));
                    source.Add("Copy", GetString("PdfViewer_Copy"));
                    source.Add("Text Selection", GetString("PdfViewer_TextSelection"));
                    source.Add("Panning", GetString("PdfViewer_Panning"));
                    source.Add("Text Search", GetString("PdfViewer_TextSearch"));
                    source.Add("Find in document", GetString("PdfViewer_Findindocument"));
                    source.Add("Match case", GetString("PdfViewer_Matchcase"));
                    source.Add("Apply", GetString("PdfViewer_Apply]"));
                    source.Add("GoToPage", GetString("PdfViewer_GoToPage"));
                    source.Add("No matches", GetString("PdfViewer_Nomatches"));
                    source.Add("No Text Found", GetString("PdfViewer_NoTextFound"));
                    source.Add("Undo", GetString("PdfViewer_Undo"));
                    source.Add("Redo", GetString("PdfViewer_Redo"));
                    source.Add("Annotation", GetString("PdfViewer_Annotation"));
                    source.Add("Highlight", GetString("PdfViewer_Highlight"));
                    source.Add("Underline", GetString("PdfViewer_Underline"));
                    source.Add("Strikethrough", GetString("PdfViewer_Strikethrough"));
                    source.Add("Delete", GetString("PdfViewer_Delete"));
                    source.Add("Opacity", GetString("PdfViewer_Opacity"));
                    source.Add("Color edit", GetString("PdfViewer_ColorEdit"));
                    source.Add("Opacity edit", GetString("PdfViewer_OpacityEdit"));
                    source.Add("Highlight context", GetString("PdfViewer_HighlightContext"));
                    source.Add("Underline context", GetString("PdfViewer_UnderlineContext"));
                    source.Add("Strikethrough context", GetString("PdfViewer_StrikethroughContext"));
                    source.Add("Server error", GetString("PdfViewer_Servererror"));
                    source.Add("Client error", GetString("PdfViewer_Clienterror"));
                    source.Add("Open text", GetString("PdfViewer_OpenText"));
                    source.Add("First text", GetString("PdfViewer_FirstText"));
                    source.Add("Previous text", GetString("PdfViewer_PreviousText"));
                    source.Add("Next text", GetString("PdfViewer_NextText"));
                    source.Add("Last text", GetString("PdfViewer_LastText"));
                    source.Add("Zoom in text", GetString("PdfViewer_ZoomInText"));
                    source.Add("Zoom out text", GetString("PdfViewer_ZoomOutText"));
                    source.Add("Selection text", GetString("PdfViewer_SelectionText"));
                    source.Add("Pan text", GetString("PdfViewer_PanText"));
                    source.Add("Print text", GetString("PdfViewer_PrintText"));
                    source.Add("Search text", GetString("PdfViewer_SearchText"));
                    source.Add("Annotation Edit text", GetString("PdfViewer_AnnotationEditText"));
                    source.Add("Line Thickness", GetString("PdfViewer_LineThickness"));
                    source.Add("Line Properties", GetString("PdfViewer_LineProperties"));
                    source.Add("Start Arrow", GetString("PdfViewer_StartArrow"));
                    source.Add("End Arrow", GetString("PdfViewer_EndArrow"));
                    source.Add("Line Style", GetString("PdfViewer_LineStyle"));
                    source.Add("Fill Color", GetString("PdfViewer_FillColor"));
                    source.Add("Line Color", GetString("PdfViewer_LineColor"));
                    source.Add("None", GetString("PdfViewer_None"));
                    source.Add("Open Arrow", GetString("PdfViewer_OpenArrow"));
                    source.Add("Closed Arrow", GetString("PdfViewer_ClosedArrow"));
                    source.Add("Round Arrow", GetString("PdfViewer_RoundArrow"));
                    source.Add("Square Arrow", GetString("PdfViewer_SquareArrow"));
                    source.Add("Diamond Arrow", GetString("PdfViewer_DiamondArrow"));
                    source.Add("Cut", GetString("PdfViewer_Cut"));
                    source.Add("Paste", GetString("PdfViewer_Paste"));
                    source.Add("Delete Context", GetString("PdfViewer_DeleteContext"));
                    source.Add("Properties", GetString("PdfViewer_Properties"));
                    source.Add("Add Stamp", GetString("PdfViewer_AddStamp"));
                    source.Add("Add Shapes", GetString("PdfViewer_AddShapes"));
                    source.Add("Stroke edit", GetString("PdfViewer_StrokeEdit"));
                    source.Add("Change thickness", GetString("PdfViewer_ChangeThickness"));
                    source.Add("Add line", GetString("PdfViewer_Addline"));
                    source.Add("Add arrow", GetString("PdfViewer_AddArrow"));
                    source.Add("Add rectangle", GetString("PdfViewer_AddRectangle"));
                    source.Add("Add circle", GetString("PdfViewer_AddCircle"));
                    source.Add("Add polygon", GetString("PdfViewer_AddPolygon"));
                    source.Add("Add Comments", GetString("PdfViewer_AddComments"));
                    source.Add("Comments", GetString("PdfViewer_Comments"));
                    source.Add("No Comments Yet", GetString("PdfViewer_NoCommentsYet"));
                    source.Add("Accepted", GetString("PdfViewer_Accepted"));
                    source.Add("Completed", GetString("PdfViewer_Completed"));
                    source.Add("Cancelled", GetString("PdfViewer_Cancelled"));
                    source.Add("Rejected", GetString("PdfViewer_Rejected"));
                    source.Add("Leader Length", GetString("PdfViewer_LeaderLength"));
                    source.Add("Scale Ratio", GetString("PdfViewer_ScaleRatio"));
                    source.Add("Calibrate", GetString("PdfViewer_Calibrate"));
                    source.Add("Calibrate Distance", GetString("PdfViewer_CalibrateDistance"));
                    source.Add("Calibrate Perimeter", GetString("PdfViewer_CalibratePerimeter"));
                    source.Add("Calibrate Area", GetString("PdfViewer_CalibrateArea"));
                    source.Add("Calibrate Radius", GetString("PdfViewer_CalibrateRadius"));
                    source.Add("Calibrate Volume", GetString("PdfViewer_CalibrateVolume"));
                    source.Add("Depth", GetString("PdfViewer_Depth"));
                    source.Add("Closed", GetString("PdfViewer_Closed"));
                    source.Add("Round", GetString("PdfViewer_Round"));
                    source.Add("Square", GetString("PdfViewer_Square"));
                    source.Add("Diamond", GetString("PdfViewer_Diamond"));
                    source.Add("Edit", GetString("PdfViewer_Edit"));
                    source.Add("Comment", GetString("PdfViewer_Comment"));
                    source.Add("Comment Panel", GetString("PdfViewer_CommentPanel"));
                    source.Add("Set Status", GetString("PdfViewer_SetStatus"));
                    source.Add("Post", GetString("PdfViewer_Post"));
                    source.Add("Page", GetString("PdfViewer_Page"));
                    source.Add("Add a comment", GetString("PdfViewer_AddComment"));
                    source.Add("Add a reply", GetString("PdfViewer_AddReply"));
                    source.Add("Import Annotations", GetString("PdfViewer_ImportAnnotations"));
                    source.Add("Export Annotations", GetString("PdfViewer_ExportAnnotations"));
                    source.Add("Add", GetString("PdfViewer_Add"));
                    source.Add("Clear", GetString("PdfViewer_Clear"));
                    source.Add("Bold", GetString("PdfViewer_Bold"));
                    source.Add("Italic", GetString("PdfViewer_Italic"));
                    source.Add("Strikethroughs", GetString("PdfViewer_Strikethroughs"));
                    source.Add("Underlines", GetString("PdfViewer_Underlines"));
                    source.Add("Superscript", GetString("PdfViewer_Superscript"));
                    source.Add("Subscript", GetString("PdfViewer_Subscript"));
                    source.Add("Align left", GetString("PdfViewer_AlignLeft"));
                    source.Add("Align right", GetString("PdfViewer_AlignRight"));
                    source.Add("Center", GetString("PdfViewer_Center"));
                    source.Add("Justify", GetString("PdfViewer_Justify"));
                    source.Add("Font color", GetString("PdfViewer_FontColor"));
                    source.Add("Text Align", GetString("PdfViewer_TextAlign"));
                    source.Add("Text Properties", GetString("PdfViewer_TextProperties"));
                    source.Add("Draw Signature", GetString("PdfViewer_DrawSignature"));
                    source.Add("Create", GetString("PdfViewer_Create"));
                    source.Add("Font family", GetString("PdfViewer_FontFamily"));
                    source.Add("Font size", GetString("PdfViewer_FontSize"));
                    source.Add("Free Text", GetString("PdfViewer_FreeText"));
                    source.Add("Import Failed", GetString("PdfViewer_ImportFailed"));
                    source.Add("File not found", GetString("PdfViewer_FileNotFound"));
                    source.Add("Export Failed", GetString("PdfViewer_ExportFailed"));
                    break;

                case "auto-complete":
                    source.Add("noRecordsTemplate", GetString("AutoComplete_NoRecordsTemplate"));
                    source.Add("actionFailureTemplate", GetString("AutoComplete_ActionFailureTemplate"));
                    break;

                case "calendar":
                    source.Add("today", GetString("Calendar_Today"));
                    break;

                case "chart":
                    source.Add("ZoomIn", GetString("Chart_ZoomIn"));
                    source.Add("Zoom", GetString("Chart_Zoom"));
                    source.Add("ZoomOut", GetString("Chart_ZoomOut"));
                    source.Add("Pan", GetString("Chart_Pan"));
                    source.Add("Reset", GetString("Chart_Reset"));
                    source.Add("ResetZoom", GetString("Chart_ResetZoom"));
                    break;

                case "colorpicker":
                    source.Add("Apply", GetString("ColorPicker_Apply"));
                    source.Add("Cancel", GetString("ColorPicker_Cancel"));
                    source.Add("ModeSwitcher", GetString("ColorPicker_ModeSwitcher"));
                    break;

                case "combo-box":
                    source.Add("noRecordsTemplate", GetString("ComboBox_NoRecordsTemplate"));
                    source.Add("actionFailureTemplate", GetString("ComboBox_ActionFailureTemplate"));
                    break;

                case "datepicker":
                    source.Add("today", GetString("DatePicker_Today"));
                    source.Add("placeholder", GetString("DatePicker_Placeholder"));
                    break;

                case "daterangepicker":
                    source.Add("placeholder", GetString("DateRangePicker_Placeholder"));
                    source.Add("startLabel", GetString("DateRangePicker_StartLabel"));
                    source.Add("endLabel", GetString("DateRangePicker_EndLabel"));
                    source.Add("applyText", GetString("DateRangePicker_ApplyText"));
                    source.Add("cancelText", GetString("DateRangePicker_CancelText"));
                    source.Add("selectedDays", GetString("DateRangePicker_SelectedDays"));
                    source.Add("days", GetString("DateRangePicker_Days"));
                    source.Add("customRange", GetString("DateRangePicker_CustomRange"));
                    break;

                case "datetimepicker":
                    source.Add("today", GetString("DateTimePicker_Today"));
                    source.Add("placeholder", GetString("DateTimePicker_Placeholder"));
                    break;

                case "diagram":
                    source.Add("Copy", GetString("Diagram_Copy"));
                    source.Add("Cut", GetString("Diagram_Cut"));
                    source.Add("Paste", GetString("Diagram_Paste"));
                    source.Add("Undo", GetString("Diagram_Undo"));
                    source.Add("Redo", GetString("Diagram_Redo"));
                    source.Add("SelectAll", GetString("Diagram_SelectAll"));
                    source.Add("Grouping", GetString("Diagram_Grouping"));
                    source.Add("Group", GetString("Diagram_Group"));
                    source.Add("UnGroup", GetString("Diagram_UnGroup"));
                    source.Add("Order", GetString("Diagram_Order"));
                    source.Add("BringToFront", GetString("Diagram_BringToFront"));
                    source.Add("MoveForward", GetString("Diagram_MoveForward"));
                    source.Add("SendToBack", GetString("Diagram_SendToBack"));
                    source.Add("SendBackward", GetString("Diagram_SendBackward"));
                    break;

                case "dialog":
                    source.Add("close", GetString("Dialog_Close"));
                    break;

                case "documenteditor":
                    source.Add("Table", GetString("DocumentEditor_Table"));
                    source.Add("Row", GetString("DocumentEditor_Row"));
                    source.Add("Cell", GetString("DocumentEditor_Cell"));
                    source.Add("Ok", GetString("DocumentEditor_Ok"));
                    source.Add("Cancel", GetString("DocumentEditor_Cancel"));
                    source.Add("Size", GetString("DocumentEditor_Size"));
                    source.Add("Preferred Width", GetString("DocumentEditor_PreferredWidth"));
                    source.Add("Points", GetString("DocumentEditor_Points"));
                    source.Add("Percent", GetString("DocumentEditor_Percent"));
                    source.Add("Measure in", GetString("DocumentEditor_MeasureIn"));
                    source.Add("Alignment", GetString("DocumentEditor_Alignment"));
                    source.Add("Left", GetString("DocumentEditor_Left"));
                    source.Add("Center", GetString("DocumentEditor_Center"));
                    source.Add("Right", GetString("DocumentEditor_Right"));
                    source.Add("Justify", GetString("DocumentEditor_Justify"));
                    source.Add("Indent from left", GetString("DocumentEditor_IndentFromLeft"));
                    source.Add("Borders and Shading", GetString("DocumentEditor_BordersAndShading"));
                    source.Add("Options", GetString("DocumentEditor_Options"));
                    source.Add("Specify height", GetString("DocumentEditor_SpecifyHeight"));
                    source.Add("At least", GetString("DocumentEditor_AtLeast"));
                    source.Add("Exactly", GetString("DocumentEditor_Exactly"));
                    source.Add("Row height is", GetString("DocumentEditor_RowHeightIs"));
                    source.Add("Allow row to break across pages", GetString("DocumentEditor_AllowRowToBreakAcrossPages"));
                    source.Add("Repeat as header row at the top of each page", GetString("DocumentEditor_RepeatAsHeaderRowAtTheTopOfEachPage"));
                    source.Add("Vertical alignment", GetString("DocumentEditor_VerticalAlignment"));
                    source.Add("Top", GetString("DocumentEditor_Top"));
                    source.Add("Bottom", GetString("DocumentEditor_Bottom"));
                    source.Add("Default cell margins", GetString("DocumentEditor_DefaultCellMargins"));
                    source.Add("Default cell spacing", GetString("DocumentEditor_DefaultCellSpacing"));
                    source.Add("Allow spacing between cells", GetString("DocumentEditor_AllowSpacingBetweenCells"));
                    source.Add("Cell margins", GetString("DocumentEditor_CellMargins"));
                    source.Add("Same as the whole table", GetString("DocumentEditor_SameAsTheWholeTable"));
                    source.Add("Borders", GetString("DocumentEditor_Borders"));
                    source.Add("None", GetString("DocumentEditor_None"));
                    source.Add("Style", GetString("DocumentEditor_Style"));
                    source.Add("Width", GetString("DocumentEditor_Width"));
                    source.Add("Height", GetString("DocumentEditor_Height"));
                    source.Add("Letter", GetString("DocumentEditor_Letter"));
                    source.Add("Tabloid", GetString("DocumentEditor_Tabloid"));
                    source.Add("Legal", GetString("DocumentEditor_Legal"));
                    source.Add("Statement", GetString("DocumentEditor_Statement"));
                    source.Add("Executive", GetString("DocumentEditor_Executive"));
                    source.Add("A3", GetString("DocumentEditor_A3"));
                    source.Add("A4", GetString("DocumentEditor_A4"));
                    source.Add("A5", GetString("DocumentEditor_A5"));
                    source.Add("B4", GetString("DocumentEditor_B4"));
                    source.Add("B5", GetString("DocumentEditor_B5"));
                    source.Add("Custom Size", GetString("DocumentEditor_CustomSize"));
                    source.Add("Different odd and even", GetString("DocumentEditor_DifferentOddAndEven"));
                    source.Add("Different first page", GetString("DocumentEditor_DifferentFirstPage"));
                    source.Add("From edge", GetString("DocumentEditor_FromEdge"));
                    source.Add("Header", GetString("DocumentEditor_Header"));
                    source.Add("Footer", GetString("DocumentEditor_Footer"));
                    source.Add("Margin", GetString("DocumentEditor_Margin"));
                    source.Add("Paper", GetString("DocumentEditor_Paper"));
                    source.Add("Layout", GetString("DocumentEditor_Layout"));
                    source.Add("Orientation", GetString("DocumentEditor_Orientation"));
                    source.Add("Landscape", GetString("DocumentEditor_Landscape"));
                    source.Add("Portrait", GetString("DocumentEditor_Portrait"));
                    source.Add("Show page numbers", GetString("DocumentEditor_ShowPageNumbers"));
                    source.Add("Right align page numbers", GetString("DocumentEditor_RightAlignPageNumbers"));
                    source.Add("Nothing", GetString("DocumentEditor_Nothing"));
                    source.Add("Tab leader", GetString("DocumentEditor_TabLeader"));
                    source.Add("Show levels", GetString("DocumentEditor_ShowLevels"));
                    source.Add("Use hyperlinks instead of page numbers", GetString("DocumentEditor_UseHyperlinksInsteadOfPageNumbers"));
                    source.Add("Build table of contents from", GetString("DocumentEditor_BuildTableOfContentsFrom"));
                    source.Add("Styles", GetString("DocumentEditor_Styles"));
                    source.Add("Available styles", GetString("DocumentEditor_AvailableStyles"));
                    source.Add("TOC level", GetString("DocumentEditor_TOCLevel"));
                    source.Add("Heading", GetString("DocumentEditor_Heading"));
                    source.Add("Heading 1", GetString("DocumentEditor_Heading1"));
                    source.Add("Heading 2", GetString("DocumentEditor_Heading2"));
                    source.Add("Heading 3", GetString("DocumentEditor_Heading3"));
                    source.Add("Heading 4", GetString("DocumentEditor_Heading4"));
                    source.Add("Heading 5", GetString("DocumentEditor_Heading5"));
                    source.Add("Heading 6", GetString("DocumentEditor_Heading6"));
                    source.Add("List Paragraph", GetString("DocumentEditor_ListParagraph"));
                    source.Add("Normal", GetString("DocumentEditor_Normal"));
                    source.Add("Outline levels", GetString("DocumentEditor_OutlineLevels"));
                    source.Add("Table entry fields", GetString("DocumentEditor_TableEntryFields"));
                    source.Add("Modify", GetString("DocumentEditor_Modify"));
                    source.Add("Color", GetString("DocumentEditor_Color"));
                    source.Add("Setting", GetString("DocumentEditor_Setting"));
                    source.Add("Box", GetString("DocumentEditor_Box"));
                    source.Add("All", GetString("DocumentEditor_All"));
                    source.Add("Custom", GetString("DocumentEditor_Custom"));
                    source.Add("Preview", GetString("DocumentEditor_Preview"));
                    source.Add("Shading", GetString("DocumentEditor_Shading"));
                    source.Add("Fill", GetString("DocumentEditor_Fill"));
                    source.Add("Apply To", GetString("DocumentEditor_ApplyTo"));
                    source.Add("Table Properties", GetString("DocumentEditor_TableProperties"));
                    source.Add("Cell Options", GetString("DocumentEditor_CellOptions"));
                    source.Add("Table Options", GetString("DocumentEditor_TableOptions"));
                    source.Add("Insert Table", GetString("DocumentEditor_InsertTable"));
                    source.Add("Number of columns", GetString("DocumentEditor_NumberOfColumns"));
                    source.Add("Number of rows", GetString("DocumentEditor_NumberOfRows"));
                    source.Add("Text to display", GetString("DocumentEditor_TextToDisplay"));
                    source.Add("Address", GetString("DocumentEditor_Address"));
                    source.Add("Insert Hyperlink", GetString("DocumentEditor_InsertHyperlink"));
                    source.Add("Edit Hyperlink", GetString("DocumentEditor_EditHyperlink"));
                    source.Add("Insert", GetString("DocumentEditor_Insert"));
                    source.Add("General", GetString("DocumentEditor_General"));
                    source.Add("Indentation", GetString("DocumentEditor_Indentation"));
                    source.Add("Before text", GetString("DocumentEditor_BeforeText"));
                    source.Add("Special", GetString("DocumentEditor_Special"));
                    source.Add("First line", GetString("DocumentEditor_FirstLine"));
                    source.Add("Hanging", GetString("DocumentEditor_Hanging"));
                    source.Add("After text", GetString("DocumentEditor_AfterText"));
                    source.Add("By", GetString("DocumentEditor_By"));
                    source.Add("Before", GetString("DocumentEditor_Before"));
                    source.Add("Line Spacing", GetString("DocumentEditor_LineSpacing"));
                    source.Add("After", GetString("DocumentEditor_After"));
                    source.Add("At", GetString("DocumentEditor_At"));
                    source.Add("Multiple", GetString("DocumentEditor_Multiple"));
                    source.Add("Spacing", GetString("DocumentEditor_Spacing"));
                    source.Add("Define new Multilevel list", GetString("DocumentEditor_DefineNewMultilevelList"));
                    source.Add("List level", GetString("DocumentEditor_ListLevel"));
                    source.Add("Choose level to modify", GetString("DocumentEditor_ChooseLevelToModify"));
                    source.Add("Level", GetString("DocumentEditor_Level"));
                    source.Add("Number format", GetString("DocumentEditor_NumberFormat"));
                    source.Add("Number style for this level", GetString("DocumentEditor_NumberStyleForThisLevel"));
                    source.Add("Enter formatting for number", GetString("DocumentEditor_EnterFormattingForNumber"));
                    source.Add("Start at", GetString("DocumentEditor_StartAt"));
                    source.Add("Restart list after", GetString("DocumentEditor_RestartListAfter"));
                    source.Add("Position", GetString("DocumentEditor_Position"));
                    source.Add("Text indent at", GetString("DocumentEditor_TextIndentAt"));
                    source.Add("Aligned at", GetString("DocumentEditor_AlignedAt"));
                    source.Add("Follow number with", GetString("DocumentEditor_FollowNumberWith"));
                    source.Add("Tab character", GetString("DocumentEditor_TabCharacter"));
                    source.Add("Space", GetString("DocumentEditor_Space"));
                    source.Add("Arabic", GetString("DocumentEditor_Arabic"));
                    source.Add("UpRoman", GetString("DocumentEditor_UpRoman"));
                    source.Add("LowRoman", GetString("DocumentEditor_LowRoman"));
                    source.Add("UpLetter", GetString("DocumentEditor_UpLetter"));
                    source.Add("LowLetter", GetString("DocumentEditor_LowLetter"));
                    source.Add("Number", GetString("DocumentEditor_Number"));
                    source.Add("Leading zero", GetString("DocumentEditor_LeadingZero"));
                    source.Add("Bullet", GetString("DocumentEditor_Bullet"));
                    source.Add("Ordinal", GetString("DocumentEditor_Ordinal"));
                    source.Add("Ordinal Text", GetString("DocumentEditor_OrdinalText"));
                    source.Add("For East", GetString("DocumentEditor_ForEast"));
                    source.Add("No Restart", GetString("DocumentEditor_NoRestart"));
                    source.Add("Font", GetString("DocumentEditor_Font"));
                    source.Add("Font style", GetString("DocumentEditor_FontStyle"));
                    source.Add("Underline style", GetString("DocumentEditor_UnderlineStyle"));
                    source.Add("Font color", GetString("DocumentEditor_FontColor"));
                    source.Add("Effects", GetString("DocumentEditor_Effects"));
                    source.Add("Strikethrough", GetString("DocumentEditor_Strikethrough"));
                    source.Add("Superscript", GetString("DocumentEditor_Superscript"));
                    source.Add("Subscript", GetString("DocumentEditor_Subscript"));
                    source.Add("Double strikethrough", GetString("DocumentEditor_DoubleStrikethrough"));
                    source.Add("Regular", GetString("DocumentEditor_Regular"));
                    source.Add("Bold", GetString("DocumentEditor_Bold"));
                    source.Add("Italic", GetString("DocumentEditor_Italic"));
                    source.Add("Cut", GetString("DocumentEditor_Cut"));
                    source.Add("Copy", GetString("DocumentEditor_Copy"));
                    source.Add("Paste", GetString("DocumentEditor_Paste"));
                    source.Add("Hyperlink", GetString("DocumentEditor_Hyperlink"));
                    source.Add("Open Hyperlink", GetString("DocumentEditor_OpenHyperlink"));
                    source.Add("Copy Hyperlink", GetString("DocumentEditor_CopyHyperlink"));
                    source.Add("Remove Hyperlink", GetString("DocumentEditor_RemoveHyperlink"));
                    source.Add("Paragraph", GetString("DocumentEditor_Paragraph"));
                    source.Add("Linked Style", GetString("DocumentEditor_LinkedStyle"));
                    source.Add("Character", GetString("DocumentEditor_Character"));
                    source.Add("Merge Cells", GetString("DocumentEditor_MergeCells"));
                    source.Add("Insert Above", GetString("DocumentEditor_InsertAbove"));
                    source.Add("Insert Below", GetString("DocumentEditor_InsertBelow"));
                    source.Add("Insert Left", GetString("DocumentEditor_InsertLeft"));
                    source.Add("Insert Right", GetString("DocumentEditor_InsertRight"));
                    source.Add("Delete", GetString("DocumentEditor_Delete"));
                    source.Add("Delete Table", GetString("DocumentEditor_DeleteTable"));
                    source.Add("Delete Row", GetString("DocumentEditor_DeleteRow"));
                    source.Add("Delete Column", GetString("DocumentEditor_DeleteColumn"));
                    source.Add("File Name", GetString("DocumentEditor_FileName"));
                    source.Add("Format Type", GetString("DocumentEditor_FormatType"));
                    source.Add("Save", GetString("DocumentEditor_Save"));
                    source.Add("Navigation", GetString("DocumentEditor_Navigation"));
                    source.Add("Results", GetString("DocumentEditor_Results"));
                    source.Add("Replace", GetString("DocumentEditor_Replace"));
                    source.Add("Replace All", GetString("DocumentEditor_ReplaceAll"));
                    source.Add("We replaced all", GetString("DocumentEditor_WeReplacedAll"));
                    source.Add("Find", GetString("DocumentEditor_Find"));
                    source.Add("No matches", GetString("DocumentEditor_NoMatches"));
                    source.Add("All Done", GetString("DocumentEditor_AllDone"));
                    source.Add("Result", GetString("DocumentEditor_Result"));
                    source.Add("of", GetString("DocumentEditor_Of"));
                    source.Add("instances", GetString("DocumentEditor_Instances"));
                    source.Add("with", GetString("DocumentEditor_With"));
                    source.Add("Click to follow link", GetString("DocumentEditor_ClickToFollowLink"));
                    source.Add("Continue Numbering", GetString("DocumentEditor_ContinueNumbering"));
                    source.Add("Bookmark name", GetString("DocumentEditor_BookmarkName"));
                    source.Add("Close", GetString("DocumentEditor_Close"));
                    source.Add("Restart At", GetString("DocumentEditor_RestartAt"));
                    source.Add("Properties", GetString("DocumentEditor_Properties"));
                    source.Add("Name", GetString("DocumentEditor_Name"));
                    source.Add("Style type", GetString("DocumentEditor_StyleType"));
                    source.Add("Style based on", GetString("DocumentEditor_StyleBasedOn"));
                    source.Add("Style for following paragraph", GetString("DocumentEditor_StyleForFollowingParagraph"));
                    source.Add("Formatting", GetString("DocumentEditor_Formatting"));
                    source.Add("Numbering and Bullets", GetString("DocumentEditor_NumberingAndBullets"));
                    source.Add("Numbering", GetString("DocumentEditor_Numbering"));
                    source.Add("Update Field", GetString("DocumentEditor_UpdateField"));
                    source.Add("Edit Field", GetString("DocumentEditor_EditField"));
                    source.Add("Bookmark", GetString("DocumentEditor_Bookmark"));
                    source.Add("Page Setup", GetString("DocumentEditor_PageSetup"));
                    source.Add("No bookmarks found", GetString("DocumentEditor_NoBookmarksFound"));
                    source.Add("Number format tooltip information", GetString("DocumentEditor_NumberFormatTooltipInformation"));
                    source.Add("Format", GetString("DocumentEditor_Format"));
                    source.Add("Create New Style", GetString("DocumentEditor_CreateNewStyle"));
                    source.Add("Modify Style", GetString("DocumentEditor_ModifyStyle"));
                    source.Add("New", GetString("DocumentEditor_New"));
                    source.Add("Bullets", GetString("DocumentEditor_Bullets"));
                    source.Add("Use bookmarks", GetString("DocumentEditor_UseBookmarks"));
                    source.Add("Table of Contents", GetString("DocumentEditor_TableOfContents"));
                    source.Add("AutoFit", GetString("DocumentEditor_AutoFit"));
                    source.Add("AutoFit to Contents", GetString("DocumentEditor_AutoFitToContents"));
                    source.Add("AutoFit to Window", GetString("DocumentEditor_AutoFitToWindow"));
                    source.Add("Fixed Column Width", GetString("DocumentEditor_FixedColumnWidth"));
                    source.Add("Reset", GetString("DocumentEditor_Reset"));
                    source.Add("Match case", GetString("DocumentEditor_MatchCase"));
                    source.Add("Whole words", GetString("DocumentEditor_WholeWords"));
                    source.Add("Add", GetString("DocumentEditor_Add"));
                    source.Add("Go To", GetString("DocumentEditor_GoTo"));
                    source.Add("Search for", GetString("DocumentEditor_SearchFor"));
                    source.Add("Replace with", GetString("DocumentEditor_ReplaceWith"));
                    source.Add("TOC 1", GetString("DocumentEditor_TOC1"));
                    source.Add("TOC 2", GetString("DocumentEditor_TOC2"));
                    source.Add("TOC 3", GetString("DocumentEditor_TOC3"));
                    source.Add("TOC 4", GetString("DocumentEditor_TOC4"));
                    source.Add("TOC 5", GetString("DocumentEditor_TOC5"));
                    source.Add("TOC 6", GetString("DocumentEditor_TOC6"));
                    source.Add("TOC 7", GetString("DocumentEditor_TOC7"));
                    source.Add("TOC 8", GetString("DocumentEditor_TOC8"));
                    source.Add("TOC 9", GetString("DocumentEditor_TOC9"));
                    source.Add("Right-to-left", GetString("DocumentEditor_RightToLeft"));
                    source.Add("Left-to-right", GetString("DocumentEditor_LeftToRight"));
                    source.Add("Direction", GetString("DocumentEditor_Direction"));
                    source.Add("Table direction", GetString("DocumentEditor_TableDirection"));
                    source.Add("Indent from right", GetString("DocumentEditor_IndentFromRight"));
                    source.Add("Contextual Spacing", GetString("DocumentEditor_ContextualSpacing"));
                    source.Add("Password Mismatch", GetString("DocumentEditor_PasswordMismatch"));
                    source.Add("Restrict Editing", GetString("DocumentEditor_RestrictEditing"));
                    source.Add("Formatting restrictions", GetString("DocumentEditor_FormattingRestrictions"));
                    source.Add("Allow formatting", GetString("DocumentEditor_AllowFormatting"));
                    source.Add("Editing restrictions", GetString("DocumentEditor_EditingRestrictions"));
                    source.Add("Read only", GetString("DocumentEditor_ReadOnly"));
                    source.Add("Exceptions Optional", GetString("DocumentEditor_ExceptionsOptional"));
                    source.Add("Select Part Of Document And User", GetString("DocumentEditor_SelectPartOfDocumentAndUser"));
                    source.Add("Everyone", GetString("DocumentEditor_Everyone"));
                    source.Add("More users", GetString("DocumentEditor_MoreUsers"));
                    source.Add("Add Users", GetString("DocumentEditor_AddUsers"));
                    source.Add("Enforcing Protection", GetString("DocumentEditor_EnforcingProtection"));
                    source.Add("Start Enforcing Protection", GetString("DocumentEditor_StartEnforcingProtection"));
                    source.Add("Enter User", GetString("DocumentEditor_EnterUser"));
                    source.Add("Users", GetString("DocumentEditor_Users"));
                    source.Add("Enter new password", GetString("DocumentEditor_EnterNewPassword"));
                    source.Add("Reenter new password to confirm", GetString("DocumentEditor_ReenterNewPasswordToConfirm"));
                    source.Add("Your permissions", GetString("DocumentEditor_YourPermissions"));
                    source.Add("Protected Document", GetString("DocumentEditor_ProtectedDocument"));
                    source.Add("You may format text only with certain styles", GetString("DocumentEditor_YouMayFormatTextOnlyWithCertainStyles"));
                    source.Add("Stop Protection", GetString("DocumentEditor_StopProtection"));
                    source.Add("Password", GetString("DocumentEditor_Password"));
                    source.Add("Spelling Editor", GetString("DocumentEditor_SpellingEditor"));
                    source.Add("Spelling", GetString("DocumentEditor_Spelling"));
                    source.Add("Spell Check", GetString("DocumentEditor_SpellCheck"));
                    source.Add("Underline errors", GetString("DocumentEditor_UnderlineErrors"));
                    source.Add("Ignore", GetString("DocumentEditor_Ignore"));
                    source.Add("Ignore all", GetString("DocumentEditor_IgnoreAll"));
                    source.Add("Add to Dictionary", GetString("DocumentEditor_AddToDictionary"));
                    source.Add("Change", GetString("DocumentEditor_Change"));
                    source.Add("Change All", GetString("DocumentEditor_ChangeAll"));
                    source.Add("Suggestions", GetString("DocumentEditor_Suggestions"));
                    source.Add("The password is incorrect", GetString("DocumentEditor_ThePasswordIsIncorrect"));
                    source.Add("Error in establishing connection with web server", GetString("DocumentEditor_ErrorInEstablishingConnectionWithWebServer"));
                    source.Add("Highlight the regions I can edit", GetString("DocumentEditor_HighlightTheRegionsICanEdit"));
                    source.Add("Show All Regions I Can Edit", GetString("DocumentEditor_ShowAllRegionsICanEdit"));
                    source.Add("Find Next Region I Can Edit", GetString("DocumentEditor_FindNextRegionICanEdit"));
                    source.Add("Keep source formatting", GetString("DocumentEditor_KeepSourceFormatting"));
                    source.Add("Match destination formatting", GetString("DocumentEditor_MatchDestinationFormatting"));
                    source.Add("Text only", GetString("DocumentEditor_TextOnly"));
                    source.Add("Comments", GetString("DocumentEditor_Comments"));
                    source.Add("Type your comment", GetString("DocumentEditor_TypeYourComment"));
                    source.Add("Post", GetString("DocumentEditor_Post"));
                    source.Add("Reply", GetString("DocumentEditor_Reply"));
                    source.Add("New Comment", GetString("DocumentEditor_NewComment"));
                    source.Add("Edit", GetString("DocumentEditor_Edit"));
                    source.Add("Resolve", GetString("DocumentEditor_Resolve"));
                    source.Add("Reopen", GetString("DocumentEditor_Reopen"));
                    source.Add("No comments in this document", GetString("DocumentEditor_NoCommentsInThisDocument"));
                    source.Add("more", GetString("DocumentEditor_More"));
                    source.Add("Type your comment here", GetString("DocumentEditor_TypeYourCommentHere"));
                    source.Add("Next Comment", GetString("DocumentEditor_NextComment"));
                    source.Add("Previous Comment", GetString("DocumentEditor_PreviousComment"));
                    source.Add("Un-posted comments", GetString("DocumentEditor_UnPostedComments"));
                    source.Add("Discard Comment", GetString("DocumentEditor_DiscardComment"));
                    source.Add("No Headings", GetString("DocumentEditor_NoHeadings"));
                    source.Add("Add Headings", GetString("DocumentEditor_AddHeadings"));
                    source.Add("More Options", GetString("DocumentEditor_MoreOptions"));
                    source.Add("Click to see this comment", GetString("DocumentEditor_ClickToSeeThisComment"));
                    source.Add("Drop Down Form Field", GetString("DocumentEditor_DropDownFormField"));
                    source.Add("Drop-down items", GetString("DocumentEditor_DropDownItems"));
                    source.Add("Items in drop-down list", GetString("DocumentEditor_ItemsInDropDownList"));
                    source.Add("ADD", GetString("DocumentEditor_ADD"));
                    source.Add("REMOVE", GetString("DocumentEditor_REMOVE"));
                    source.Add("Field settings", GetString("DocumentEditor_FieldSettings"));
                    source.Add("Tooltip", GetString("DocumentEditor_Tooltip"));
                    source.Add("Drop-down enabled", GetString("DocumentEditor_DropDownEnabled"));
                    source.Add("Check Box Form Field", GetString("DocumentEditor_CheckBoxFormField"));
                    source.Add("Check box size", GetString("DocumentEditor_CheckBoxSize"));
                    source.Add("Auto", GetString("DocumentEditor_Auto"));
                    source.Add("Default value", GetString("DocumentEditor_DefaultValue"));
                    source.Add("Not checked", GetString("DocumentEditor_NotChecked"));
                    source.Add("Checked", GetString("DocumentEditor_Checked"));
                    source.Add("Check box enabled", GetString("DocumentEditor_CheckBoxEnabled"));
                    source.Add("Text Form Field", GetString("DocumentEditor_TextFormField"));
                    source.Add("Type", GetString("DocumentEditor_Type"));
                    source.Add("Default text", GetString("DocumentEditor_DefaultText"));
                    source.Add("Maximum length", GetString("DocumentEditor_MaximumLength"));
                    source.Add("Text format", GetString("DocumentEditor_TextFormat"));
                    source.Add("Fill-in enabled", GetString("DocumentEditor_FillInEnabled"));
                    source.Add("Default number", GetString("DocumentEditor_DefaultNumber"));
                    source.Add("Default date", GetString("DocumentEditor_DefaultDate"));
                    source.Add("Date format", GetString("DocumentEditor_DateFormat"));
                    source.Add("Merge Track", GetString("DocumentEditor_MergeTrack"));
                    source.Add("UnTrack", GetString("DocumentEditor_UnTrack"));
                    source.Add("Accept", GetString("DocumentEditor_Accept"));
                    source.Add("Reject", GetString("DocumentEditor_Reject"));
                    source.Add("Previous Changes", GetString("DocumentEditor_PreviousChanges"));
                    source.Add("Next Changes", GetString("DocumentEditor_NextChanges"));
                    source.Add("Inserted", GetString("DocumentEditor_Inserted"));
                    source.Add("Deleted", GetString("DocumentEditor_Deleted"));
                    source.Add("Changes", GetString("DocumentEditor_Changes"));
                    source.Add("Accept all", GetString("DocumentEditor_AcceptAll"));
                    source.Add("Reject all", GetString("DocumentEditor_RejectAll"));
                    source.Add("No changes", GetString("DocumentEditor_NoChanges"));
                    source.Add("Accept Changes", GetString("DocumentEditor_AcceptChanges"));
                    source.Add("Reject Changes", GetString("DocumentEditor_RejectChanges"));
                    source.Add("User", GetString("DocumentEditor_User"));
                    source.Add("View", GetString("DocumentEditor_View"));
                    break;

                case "documenteditorcontainer":
                    source.Add("New", GetString("DocumentEditorContainer_New"));
                    source.Add("Open", GetString("DocumentEditorContainer_Open"));
                    source.Add("Undo", GetString("DocumentEditorContainer_Undo"));
                    source.Add("Redo", GetString("DocumentEditorContainer_Redo"));
                    source.Add("Image", GetString("DocumentEditorContainer_Image"));
                    source.Add("Table", GetString("DocumentEditorContainer_Table"));
                    source.Add("Link", GetString("DocumentEditorContainer_Link"));
                    source.Add("Bookmark", GetString("DocumentEditorContainer_Bookmark"));
                    source.Add("Table of Contents", GetString("DocumentEditorContainer_TableOfContents"));
                    source.Add("HEADING - - - - 1", GetString("DocumentEditorContainer_HEADING1"));
                    source.Add("HEADING - - - - 2", GetString("DocumentEditorContainer_HEADING2"));
                    source.Add("HEADING - - - - 3", GetString("DocumentEditorContainer_HEADING3"));
                    source.Add("Header", GetString("DocumentEditorContainer_Header"));
                    source.Add("Footer", GetString("DocumentEditorContainer_Footer"));
                    source.Add("Page Setup", GetString("DocumentEditorContainer_PageSetup"));
                    source.Add("Page Number", GetString("DocumentEditorContainer_PageNumber"));
                    source.Add("Break", GetString("DocumentEditorContainer_Break"));
                    source.Add("Find", GetString("DocumentEditorContainer_Find"));
                    source.Add("Local Clipboard", GetString("DocumentEditorContainer_LocalClipboard"));
                    source.Add("Restrict Editing", GetString("DocumentEditorContainer_RestrictEditing"));
                    source.Add("Upload from computer", GetString("DocumentEditorContainer_UploadFromComputer"));
                    source.Add("By URL", GetString("DocumentEditorContainer_ByURL"));
                    source.Add("Page Break", GetString("DocumentEditorContainer_PageBreak"));
                    source.Add("Section Break", GetString("DocumentEditorContainer_SectionBreak"));
                    source.Add("Header And Footer", GetString("DocumentEditorContainer_HeaderAndFooter"));
                    source.Add("Options", GetString("DocumentEditorContainer_Options"));
                    source.Add("Levels", GetString("DocumentEditorContainer_Levels"));
                    source.Add("Different First Page", GetString("DocumentEditorContainer_DifferentFirstPage"));
                    source.Add("Different header and footer for odd and even pages", GetString("DocumentEditorContainer_DifferentHeaderAndFooterForOddAndEvenPages"));
                    source.Add("Different Odd And Even Pages", GetString("DocumentEditorContainer_DifferentOddAndEvenPages"));
                    source.Add("Different header and footer for first page", GetString("DocumentEditorContainer_DifferentHeaderAndFooterForFirstPage"));
                    source.Add("Position", GetString("DocumentEditorContainer_Position"));
                    source.Add("Header from Top", GetString("DocumentEditorContainer_HeaderFromTop"));
                    source.Add("Footer from Bottom", GetString("DocumentEditorContainer_FooterFromBottom"));
                    source.Add("Distance from top of the page to top of the header", GetString("DocumentEditorContainer_DistanceFromTopOfThePageToTopOfTheHeader"));
                    source.Add("Distance from bottom of the page to bottom of the footer", GetString("DocumentEditorContainer_DistanceFromBottomOfThePageToBottomOfTheFooter"));
                    source.Add("Aspect ratio", GetString("DocumentEditorContainer_AspectRatio"));
                    source.Add("W", GetString("DocumentEditorContainer_W"));
                    source.Add("H", GetString("DocumentEditorContainer_H"));
                    source.Add("Width", GetString("DocumentEditorContainer_Width"));
                    source.Add("Height", GetString("DocumentEditorContainer_Height"));
                    source.Add("Text", GetString("DocumentEditorContainer_Text"));
                    source.Add("Paragraph", GetString("DocumentEditorContainer_Paragraph"));
                    source.Add("Fill", GetString("DocumentEditorContainer_Fill"));
                    source.Add("Fill color", GetString("DocumentEditorContainer_FillColor"));
                    source.Add("Border Style", GetString("DocumentEditorContainer_BorderStyle"));
                    source.Add("Outside borders", GetString("DocumentEditorContainer_OutsideBorders"));
                    source.Add("All borders", GetString("DocumentEditorContainer_AllBorders"));
                    source.Add("Inside borders", GetString("DocumentEditorContainer_InsideBorders"));
                    source.Add("Left border", GetString("DocumentEditorContainer_LeftBorder"));
                    source.Add("Inside vertical border", GetString("DocumentEditorContainer_InsideVerticalBorder"));
                    source.Add("Right border", GetString("DocumentEditorContainer_RightBorder"));
                    source.Add("Top border", GetString("DocumentEditorContainer_TopBorder"));
                    source.Add("Inside horizontal border", GetString("DocumentEditorContainer_InsideHorizontalBorder"));
                    source.Add("Bottom border", GetString("DocumentEditorContainer_BottomBorder"));
                    source.Add("Border color", GetString("DocumentEditorContainer_BorderColor"));
                    source.Add("Border width", GetString("DocumentEditorContainer_BorderWidth"));
                    source.Add("Cell", GetString("DocumentEditorContainer_Cell"));
                    source.Add("Merge cells", GetString("DocumentEditorContainer_MergeCells"));
                    source.Add("Insert Or Delete", GetString("DocumentEditorContainer_InsertOrDelete"));
                    source.Add("Insert columns to the left", GetString("DocumentEditorContainer_InsertColumnsToTheLeft"));
                    source.Add("Insert columns to the right", GetString("DocumentEditorContainer_InsertColumnsToTheRight"));
                    source.Add("Insert rows above", GetString("DocumentEditorContainer_InsertRowsAbove"));
                    source.Add("Insert rows below", GetString("DocumentEditorContainer_InsertRowsBelow"));
                    source.Add("Delete rows", GetString("DocumentEditorContainer_DeleteRows"));
                    source.Add("Delete columns", GetString("DocumentEditorContainer_DeleteColumns"));
                    source.Add("Cell Margin", GetString("DocumentEditorContainer_CellMargin"));
                    source.Add("Top", GetString("DocumentEditorContainer_Top"));
                    source.Add("Bottom", GetString("DocumentEditorContainer_Bottom"));
                    source.Add("Left", GetString("DocumentEditorContainer_Left"));
                    source.Add("Right", GetString("DocumentEditorContainer_Right"));
                    source.Add("Align Text", GetString("DocumentEditorContainer_AlignText"));
                    source.Add("Align top", GetString("DocumentEditorContainer_AlignTop"));
                    source.Add("Align bottom", GetString("DocumentEditorContainer_AlignBottom"));
                    source.Add("Align center", GetString("DocumentEditorContainer_AlignCenter"));
                    source.Add("Number of heading or outline levels to be shown in table of contents", GetString("DocumentEditorContainer_NumberOfHeadingOrOutlineLevelsToBeShownInTableOfContents"));
                    source.Add("Show page numbers", GetString("DocumentEditorContainer_ShowPageNumbers"));
                    source.Add("Show page numbers in table of contents", GetString("DocumentEditorContainer_ShowPageNumbersInTableOfContents"));
                    source.Add("Right align page numbers", GetString("DocumentEditorContainer_RightAlignPageNumbers"));
                    source.Add("Right align page numbers in table of contents", GetString("DocumentEditorContainer_RightAlignPageNumbersInTableOfContents"));
                    source.Add("Use hyperlinks", GetString("DocumentEditorContainer_UseHyperlinks"));
                    source.Add("Use hyperlinks instead of page numbers", GetString("DocumentEditorContainer_UseHyperlinksInsteadOfPageNumbers"));
                    source.Add("Font", GetString("DocumentEditorContainer_Font"));
                    source.Add("Font Size", GetString("DocumentEditorContainer_FontSize"));
                    source.Add("Font color", GetString("DocumentEditorContainer_FontColor"));
                    source.Add("Text highlight color", GetString("DocumentEditorContainer_TextHighlightColor"));
                    source.Add("Clear all formatting", GetString("DocumentEditorContainer_ClearAllFormatting"));
                    source.Add("Bold Tooltip", GetString("DocumentEditorContainer_BoldTooltip"));
                    source.Add("Italic Tooltip", GetString("DocumentEditorContainer_ItalicTooltip"));
                    source.Add("Underline Tooltip", GetString("DocumentEditorContainer_UnderlineTooltip"));
                    source.Add("Strikethrough", GetString("DocumentEditorContainer_Strikethrough"));
                    source.Add("Superscript Tooltip", GetString("DocumentEditorContainer_SuperscriptTooltip"));
                    source.Add("Subscript Tooltip", GetString("DocumentEditorContainer_SubscriptTooltip"));
                    source.Add("Align left Tooltip", GetString("DocumentEditorContainer_AlignLeftTooltip"));
                    source.Add("Center Tooltip", GetString("DocumentEditorContainer_CenterTooltip"));
                    source.Add("Align right Tooltip", GetString("DocumentEditorContainer_AlignRightTooltip"));
                    source.Add("Justify Tooltip", GetString("DocumentEditorContainer_JustifyTooltip"));
                    source.Add("Decrease indent", GetString("DocumentEditorContainer_DecreaseIndent"));
                    source.Add("Increase indent", GetString("DocumentEditorContainer_IncreaseIndent"));
                    source.Add("Line spacing", GetString("DocumentEditorContainer_LineSpacing"));
                    source.Add("Bullets", GetString("DocumentEditorContainer_Bullets"));
                    source.Add("Numbering", GetString("DocumentEditorContainer_Numbering"));
                    source.Add("Styles", GetString("DocumentEditorContainer_Styles"));
                    source.Add("Manage Styles", GetString("DocumentEditorContainer_ManageStyles"));
                    source.Add("Page", GetString("DocumentEditorContainer_Page"));
                    source.Add("of", GetString("DocumentEditorContainer_Of"));
                    source.Add("Fit one page", GetString("DocumentEditorContainer_FitOnePage"));
                    source.Add("Spell Check", GetString("DocumentEditorContainer_SpellCheck"));
                    source.Add("Underline errors", GetString("DocumentEditorContainer_UnderlineErrors"));
                    source.Add("Fit page width", GetString("DocumentEditorContainer_FitPageWidth"));
                    source.Add("Update", GetString("DocumentEditorContainer_Update"));
                    source.Add("Cancel", GetString("DocumentEditorContainer_Cancel"));
                    source.Add("Insert", GetString("DocumentEditorContainer_Insert"));
                    source.Add("No Border", GetString("DocumentEditorContainer_NoBorder"));
                    source.Add("Create a new document", GetString("DocumentEditorContainer_CreateANewDocument"));
                    source.Add("Open a document", GetString("DocumentEditorContainer_OpenADocument"));
                    source.Add("Undo Tooltip", GetString("DocumentEditorContainer_UndoTooltip"));
                    source.Add("Redo Tooltip", GetString("DocumentEditorContainer_RedoTooltip"));
                    source.Add("Insert inline picture from a file", GetString("DocumentEditorContainer_InsertInlinePictureFromAFile"));
                    source.Add("Insert a table into the document", GetString("DocumentEditorContainer_InsertATableIntoTheDocument"));
                    source.Add("Create Hyperlink", GetString("DocumentEditorContainer_CreateHyperlink"));
                    source.Add("Insert a bookmark in a specific place in this document", GetString("DocumentEditorContainer_InsertABookmarkInASpecificPlaceInThisDocument"));
                    source.Add("Provide an overview of your document by adding a table of contents", GetString("DocumentEditorContainer_ProvideAnOverviewOfYourDocumentByAddingATableOfContents"));
                    source.Add("Add or edit the header", GetString("DocumentEditorContainer_AddOrEditTheHeader"));
                    source.Add("Add or edit the footer", GetString("DocumentEditorContainer_AddOrEditTheFooter"));
                    source.Add("Open the page setup dialog", GetString("DocumentEditorContainer_OpenThePageSetupDialog"));
                    source.Add("Add page numbers", GetString("DocumentEditorContainer_AddPageNumbers"));
                    source.Add("Find Text", GetString("DocumentEditorContainer_FindText"));
                    source.Add("Toggle between the internal clipboard and system clipboard", GetString("DocumentEditorContainer_ToggleBetweenTheInternalClipboardAndSystemClipboard"));
                    source.Add("Current Page Number", GetString("DocumentEditorContainer_CurrentPageNumber"));
                    source.Add("Read only", GetString("DocumentEditorContainer_ReadOnly"));
                    source.Add("Protections", GetString("DocumentEditorContainer_Protections"));
                    source.Add("Error in establishing connection with web server", GetString("DocumentEditorContainer_ErrorInEstablishingConnectionWithWebServer"));
                    source.Add("Single", GetString("DocumentEditorContainer_Single"));
                    source.Add("Double", GetString("DocumentEditorContainer_Double"));
                    source.Add("New comment", GetString("DocumentEditorContainer_NewComment"));
                    source.Add("Comments", GetString("DocumentEditorContainer_Comments"));
                    source.Add("Print layout", GetString("DocumentEditorContainer_PrintLayout"));
                    source.Add("Web layout", GetString("DocumentEditorContainer_WebLayout"));
                    source.Add("Form Fields", GetString("DocumentEditorContainer_FormFields"));
                    source.Add("Text Form", GetString("DocumentEditorContainer_TextForm"));
                    source.Add("Check Box", GetString("DocumentEditorContainer_CheckBox"));
                    source.Add("DropDown", GetString("DocumentEditorContainer_DropDown"));
                    source.Add("Update Fields", GetString("DocumentEditorContainer_UpdateFields"));
                    source.Add("Update cross reference fields", GetString("DocumentEditorContainer_UpdateCrossReferenceFields"));
                    source.Add("Track Changes", GetString("DocumentEditorContainer_Track_changes"));
                    source.Add("TrackChanges", GetString("DocumentEditorContainer_TrackChanges"));
                    break;

                case "drop-down-list":
                    source.Add("noRecordsTemplate", GetString("DropDownList_NoRecordsTemplate"));
                    source.Add("actionFailureTemplate", GetString("DropDownList_ActionFailureTemplate"));
                    break;

                case "dropdowns":
                    source.Add("noRecordsTemplate", GetString("DropDownList_NoRecordsTemplate"));
                    source.Add("actionFailureTemplate", GetString("DropDownList_ActionFailureTemplate"));
                    source.Add("overflowCountTemplate", GetString("MultiSelect_OverflowCountTemplate"));
                    source.Add("selectAllText", GetString("MultiSelect_SelectAllText"));
                    source.Add("unSelectAllText", GetString("MultiSelect_UnSelectAllText"));
                    source.Add("totalCountTemplate", GetString("MultiSelect_TotalCountTemplate"));
                    break;

                case "filemanager":
                    source.Add("NewFolder", GetString("FileManager_NewFolder"));
                    source.Add("Upload", GetString("FileManager_Upload"));
                    source.Add("Delete", GetString("FileManager_Delete"));
                    source.Add("Rename", GetString("FileManager_Rename"));
                    source.Add("Download", GetString("FileManager_Download"));
                    source.Add("Cut", GetString("FileManager_Cut"));
                    source.Add("Copy", GetString("FileManager_Copy"));
                    source.Add("Paste", GetString("FileManager_Paste"));
                    source.Add("SortBy", GetString("FileManager_SortBy"));
                    source.Add("Refresh", GetString("FileManager_Refresh"));
                    source.Add("Item-Selection", GetString("FileManager_ItemSelection"));
                    source.Add("Items-Selection", GetString("FileManager_ItemsSelection"));
                    source.Add("View", GetString("FileManager_View"));
                    source.Add("Details", GetString("FileManager_Details"));
                    source.Add("SelectAll", GetString("FileManager_SelectAll"));
                    source.Add("Open", GetString("FileManager_Open"));
                    source.Add("Tooltip-NewFolder", GetString("FileManager_TooltipNewFolder"));
                    source.Add("Tooltip-Upload", GetString("FileManager_TooltipUpload"));
                    source.Add("Tooltip-Delete", GetString("FileManager_TooltipDelete"));
                    source.Add("Tooltip-Rename", GetString("FileManager_TooltipRename"));
                    source.Add("Tooltip-Download", GetString("FileManager_TooltipDownload"));
                    source.Add("Tooltip-Cut", GetString("FileManager_TooltipCut"));
                    source.Add("Tooltip-Copy", GetString("FileManager_TooltipCopy"));
                    source.Add("Tooltip-Paste", GetString("FileManager_TooltipPaste"));
                    source.Add("Tooltip-SortBy", GetString("FileManager_TooltipSortBy"));
                    source.Add("Tooltip-Refresh", GetString("FileManager_TooltipRefresh"));
                    source.Add("Tooltip-Selection", GetString("FileManager_TooltipSelection"));
                    source.Add("Tooltip-View", GetString("FileManager_TooltipView"));
                    source.Add("Tooltip-Details", GetString("FileManager_TooltipDetails"));
                    source.Add("Tooltip-SelectAll", GetString("FileManager_TooltipSelectAll"));
                    source.Add("Name", GetString("FileManager_Name"));
                    source.Add("Size", GetString("FileManager_Size"));
                    source.Add("DateModified", GetString("FileManager_DateModified"));
                    source.Add("DateCreated", GetString("FileManager_DateCreated"));
                    source.Add("Path", GetString("FileManager_Path"));
                    source.Add("Modified", GetString("FileManager_Modified"));
                    source.Add("Created", GetString("FileManager_Created"));
                    source.Add("Location", GetString("FileManager_Location"));
                    source.Add("Type", GetString("FileManager_Type"));
                    source.Add("Permission", GetString("FileManager_Permission"));
                    source.Add("Ascending", GetString("FileManager_Ascending"));
                    source.Add("Descending", GetString("FileManager_Descending"));
                    source.Add("None", GetString("FileManager_None"));
                    source.Add("View-LargeIcons", GetString("FileManager_ViewLargeIcons"));
                    source.Add("View-Details", GetString("FileManager_ViewDetails"));
                    source.Add("Search", GetString("FileManager_Search"));
                    source.Add("Button-Ok", GetString("FileManager_ButtonOk"));
                    source.Add("Button-Cancel", GetString("FileManager_ButtonCancel"));
                    source.Add("Button-Yes", GetString("FileManager_ButtonYes"));
                    source.Add("Button-No", GetString("FileManager_ButtonNo"));
                    source.Add("Button-Create", GetString("FileManager_ButtonCreate"));
                    source.Add("Button-Save", GetString("FileManager_ButtonSave"));
                    source.Add("Header-NewFolder", GetString("FileManager_HeaderNewFolder"));
                    source.Add("Content-NewFolder", GetString("FileManager_ContentNewFolder"));
                    source.Add("Header-Rename", GetString("FileManager_HeaderRename"));
                    source.Add("Content-Rename", GetString("FileManager_ContentRename"));
                    source.Add("Header-Rename-Confirmation", GetString("FileManager_HeaderRenameConfirmation"));
                    source.Add("Content-Rename-Confirmation", GetString("FileManager_ContentRenameConfirmation"));
                    source.Add("Header-Delete", GetString("FileManager_HeaderDelete"));
                    source.Add("Content-Delete", GetString("FileManager_ContentDelete"));
                    source.Add("Header-Folder-Delete", GetString("FileManager_HeaderFolderDelete"));
                    source.Add("Content-Folder-Delete", GetString("FileManager_ContentFolderDelete"));
                    source.Add("Header-Multiple-Delete", GetString("FileManager_HeaderMultipleDelete"));
                    source.Add("Content-Multiple-Delete", GetString("FileManager_ContentMultipleDelete"));
                    source.Add("Header-Duplicate", GetString("FileManager_HeaderDuplicate"));
                    source.Add("Content-Duplicate", GetString("FileManager_ContentDuplicate"));
                    source.Add("Header-Upload", GetString("FileManager_HeaderUpload"));
                    source.Add("Error", GetString("FileManager_Error"));
                    source.Add("Validation-Empty", GetString("FileManager_ValidationEmpty"));
                    source.Add("Validation-Invalid", GetString("FileManager_ValidationInvalid"));
                    source.Add("Validation-NewFolder-Exists", GetString("FileManager_ValidationNewFolderExists"));
                    source.Add("Validation-Rename-Exists", GetString("FileManager_ValidationRenameExists"));
                    source.Add("Folder-Empty", GetString("FileManager_FolderEmpty"));
                    source.Add("File-Upload", GetString("FileManager_FileUpload"));
                    source.Add("Search-Empty", GetString("FileManager_SearchEmpty"));
                    source.Add("Search-Key", GetString("FileManager_SearchKey"));
                    source.Add("Filter-Empty", GetString("FileManager_FilterEmpty"));
                    source.Add("Filter-Key", GetString("FileManager_FilterKey"));
                    source.Add("Sub-Folder-Error", GetString("FileManager_SubFolderError"));
                    source.Add("Access-Denied", GetString("FileManager_AccessDenied"));
                    source.Add("Access-Details", GetString("FileManager_AccessDetails"));
                    source.Add("Header-Retry", GetString("FileManager_HeaderRetry"));
                    source.Add("Content-Retry", GetString("FileManagerContentRetry"));
                    source.Add("Button-Keep-Both", GetString("FileManager_ButtonKeepBoth"));
                    source.Add("Button-Replace", GetString("FileManager_ButtonReplace"));
                    source.Add("Button-Skip", GetString("FileManager_ButtonSkip"));
                    source.Add("ApplyAll-Label", GetString("FileManager_ApplyAllLabel"));
                    source.Add("KB", GetString("FileManager_KB"));
                    source.Add("Access-Message", GetString("FileManager_AccessMessage"));
                    source.Add("Network-Error", GetString("FileManager_NetworkError"));
                    source.Add("Server-Error", GetString("FileManager_ServerError"));
                    break;

                case "gantt":
                    source.Add("emptyRecord", GetString("Gantt_EmptyRecord"));
                    source.Add("id", GetString("Gantt_Id"));
                    source.Add("name", GetString("Gantt_Name"));
                    source.Add("startDate", GetString("Gantt_StartDate"));
                    source.Add("endDate", GetString("Gantt_EndDate"));
                    source.Add("duration", GetString("Gantt_Duration"));
                    source.Add("progress", GetString("Gantt_Progress"));
                    source.Add("dependency", GetString("Gantt_Dependency"));
                    source.Add("notes", GetString("Gantt_Notes"));
                    source.Add("baselineStartDate", GetString("Gantt_BaselineStartDate"));
                    source.Add("baselineEndDate", GetString("Gantt_BaselineEndDate"));
                    source.Add("type", GetString("Gantt_Type"));
                    source.Add("offset", GetString("Gantt_Offset"));
                    source.Add("resourceName", GetString("Gantt_ResourceName"));
                    source.Add("resourceID", GetString("Gantt_ResourceID"));
                    source.Add("day", GetString("Gantt_Day"));
                    source.Add("hour", GetString("Gantt_Hour"));
                    source.Add("minute", GetString("Gantt_Minute"));
                    source.Add("days", GetString("Gantt_Days"));
                    source.Add("hours", GetString("Gantt_Hours"));
                    source.Add("minutes", GetString("Gantt_Minutes"));
                    source.Add("generalTab", GetString("Gantt_GeneralTab"));
                    source.Add("customTab", GetString("Gantt_CustomTab"));
                    source.Add("writeNotes", GetString("Gantt_WriteNotes"));
                    source.Add("addDialogTitle", GetString("Gantt_AddDialogTitle"));
                    source.Add("editDialogTitle", GetString("Gantt_EditDialogTitle"));
                    source.Add("saveButton", GetString("Gantt_SaveButton"));
                    source.Add("add", GetString("Gantt_Add"));
                    source.Add("edit", GetString("Gantt_Edit"));
                    source.Add("update", GetString("Gantt_Update"));
                    source.Add("delete", GetString("Gantt_Delete"));
                    source.Add("cancel", GetString("Gantt_Cancel"));
                    source.Add("search", GetString("Gantt_Search"));
                    source.Add("task", GetString(" Gantt_Task"));
                    source.Add("tasks", GetString(" Gantt_Tasks"));
                    source.Add("zoomIn", GetString("Gantt_ZoomIn"));
                    source.Add("zoomOut", GetString("Gantt_ZoomOut"));
                    source.Add("zoomToFit", GetString("Gantt_ZoomToFit"));
                    source.Add("excelExport", GetString("Gantt_ExcelExport"));
                    source.Add("csvExport", GetString("Gantt_CsvExport"));
                    source.Add("expandAll", GetString("Gantt_ExpandAll"));
                    source.Add("collapseAll", GetString("Gantt_CollapseAll"));
                    source.Add("nextTimeSpan", GetString("Gantt_NextTimeSpan"));
                    source.Add("prevTimeSpan", GetString("Gantt_PrevTimeSpan"));
                    source.Add("okText", GetString("Gantt_OkText"));
                    source.Add("confirmDelete", GetString("Gantt_ConfirmDelete"));
                    source.Add("from", GetString("Gantt_From"));
                    source.Add("to", GetString("Gantt_To"));
                    source.Add("taskLink", GetString("Gantt_TaskLink"));
                    source.Add("lag", GetString("Gantt_Lag"));
                    source.Add("start", GetString("Gantt_Start"));
                    source.Add("finish", GetString("Gantt_Finish"));
                    source.Add("enterValue", GetString("Gantt_EnterValue"));
                    source.Add("taskBeforePredecessor_FS", GetString("Gantt_TaskBeforePredecessor_FS"));
                    source.Add("taskAfterPredecessor_FS", GetString("Gantt_TaskAfterPredecessor_FS"));
                    source.Add("taskBeforePredecessor_SS", GetString("Gantt_TaskBeforePredecessor_SS"));
                    source.Add("taskAfterPredecessor_SS", GetString("Gantt_TaskAfterPredecessor_SS"));
                    source.Add("taskBeforePredecessor_FF", GetString("Gantt_TaskBeforePredecessor_FF"));
                    source.Add("taskAfterPredecessor_FF", GetString("Gantt_TaskAfterPredecessor_FF"));
                    source.Add("taskBeforePredecessor_SF", GetString("Gantt_TaskBeforePredecessor_SF"));
                    source.Add("taskAfterPredecessor_SF", GetString("Gantt_TaskAfterPredecessor_SF"));
                    source.Add("taskInformation", GetString("Gantt_TaskInformation"));
                    source.Add("deleteTask", GetString("Gantt_DeleteTask"));
                    source.Add("deleteDependency", GetString("Gantt_DeleteDependency"));
                    source.Add("convert", GetString("Gantt_Convert"));
                    source.Add("save", GetString("Gantt_Save"));
                    source.Add("above", GetString("Gantt_Above"));
                    source.Add("below", GetString("Gantt_Below"));
                    source.Add("child", GetString("Gantt_Child"));
                    source.Add("milestone", GetString("Gantt_Milestone"));
                    source.Add("toTask", GetString("Gantt_ToTask"));
                    source.Add("toMilestone", GetString("Gantt_ToMilestone"));
                    source.Add("eventMarkers", GetString("Gantt_EventMarkers"));
                    source.Add("leftTaskLabel", GetString("Gantt_LeftTaskLabel"));
                    source.Add("rightTaskLabel", GetString("Gantt_RightTaskLabel"));
                    source.Add("timelineCell", GetString("Gantt_TimelineCell"));
                    source.Add("confirmPredecessorDelete", GetString("Gantt_ConfirmPredecessorDelete"));
                    break;

                case "grid":
                    source.Add("EmptyRecord", GetString("Grid_EmptyRecord"));
                    source.Add("True", GetString("Grid_True"));
                    source.Add("False", GetString("Grid_False"));
                    source.Add("InvalidFilterMessage", GetString("Grid_InvalidFilterMessage"));
                    source.Add("GroupDropArea", GetString("Grid_GroupDropArea"));
                    source.Add("UnGroupButton", GetString("Grid_UnGroupButton"));
                    source.Add("GroupDisable", GetString("Grid_GroupDisable"));
                    source.Add("FilterbarTitle", GetString("Grid_FilterbarTitle"));
                    source.Add("EmptyDataSourceError", GetString("Grid_EmptyDataSourceError"));
                    source.Add("Add", GetString("Grid_Add"));
                    source.Add("Edit", GetString("Grid_Edit"));
                    source.Add("Cancel", GetString("Grid_Cancel"));
                    source.Add("Update", GetString("Grid_Update"));
                    source.Add("Delete", GetString("Grid_Delete"));
                    source.Add("Print", GetString("Grid_Print"));
                    source.Add("Pdfexport", GetString("Grid_Pdfexport"));
                    source.Add("Excelexport", GetString("Grid_Excelexport"));
                    source.Add("Wordexport", GetString("Grid_Wordexport"));
                    source.Add("Csvexport", GetString("Grid_Csvexport"));
                    source.Add("Search", GetString("Grid_Search"));
                    source.Add("Columnchooser", GetString("Grid_Columnchooser"));
                    source.Add("Save", GetString("Grid_Save"));
                    source.Add("Item", GetString("Grid_Item"));
                    source.Add("Items", GetString("Grid_Items"));
                    source.Add("EditOperationAlert", GetString("Grid_EditOperationAlert"));
                    source.Add("DeleteOperationAlert", GetString("Grid_DeleteOperationAlert"));
                    source.Add("SaveButton", GetString("Grid_SaveButton"));
                    source.Add("OKButton", GetString("Grid_OKButton"));
                    source.Add("CancelButton", GetString("Grid_CancelButton"));
                    source.Add("EditFormTitle", GetString("Grid_EditFormTitle"));
                    source.Add("AddFormTitle", GetString("Grid_AddFormTitle"));
                    source.Add("BatchSaveConfirm", GetString("Grid_BatchSaveConfirm"));
                    source.Add("BatchSaveLostChanges", GetString("Grid_BatchSaveLostChanges"));
                    source.Add("ConfirmDelete", GetString("Grid_ConfirmDelete"));
                    source.Add("CancelEdit", GetString("Grid_CancelEdit"));
                    source.Add("ChooseColumns", GetString("Grid_ChooseColumns"));
                    source.Add("SearchColumns", GetString("Grid_SearchColumns"));
                    source.Add("Matchs", GetString("Grid_Matchs"));
                    source.Add("FilterButton", GetString("Grid_FilterButton"));
                    source.Add("ClearButton", GetString("Grid_ClearButton"));
                    source.Add("StartsWith", GetString("Grid_StartsWith"));
                    source.Add("EndsWith", GetString("Grid_EndsWith"));
                    source.Add("Contains", GetString("Grid_Contains"));
                    source.Add("Equal", GetString("Grid_Equal"));
                    source.Add("NotEqual", GetString("Grid_NotEqual"));
                    source.Add("LessThan", GetString("Grid_LessThan"));
                    source.Add("LessThanOrEqual", GetString("Grid_LessThanOrEqual"));
                    source.Add("GreaterThan", GetString("Grid_GreaterThan"));
                    source.Add("GreaterThanOrEqual", GetString("Grid_GreaterThanOrEqual"));
                    source.Add("ChooseDate", GetString("Grid_ChooseDate"));
                    source.Add("EnterValue", GetString("Grid_EnterValue"));
                    source.Add("Copy", GetString("Grid_Copy"));
                    source.Add("Group", GetString("Grid_Group"));
                    source.Add("Ungroup", GetString("Grid_Ungroup"));
                    source.Add("AutoFitAll", GetString("Grid_AutoFitAll"));
                    source.Add("AutoFit", GetString("Grid_AutoFit"));
                    source.Add("Export", GetString("Grid_Export"));
                    source.Add("FirstPage", GetString("Grid_FirstPage"));
                    source.Add("LastPage", GetString("Grid_LastPage"));
                    source.Add("PreviousPage", GetString("Grid_PreviousPage"));
                    source.Add("NextPage", GetString("Grid_NextPage"));
                    source.Add("SortAscending", GetString("Grid_SortAscending"));
                    source.Add("SortDescending", GetString("Grid_SortDescending"));
                    source.Add("EditRecord", GetString("Grid_EditRecord"));
                    source.Add("DeleteRecord", GetString("Grid_DeleteRecord"));
                    source.Add("FilterMenu", GetString("Grid_FilterMenu"));
                    source.Add("SelectAll", GetString("Grid_SelectAll"));
                    source.Add("Blanks", GetString("Grid_Blanks"));
                    source.Add("FilterTrue", GetString("Grid_FilterTrue"));
                    source.Add("FilterFalse", GetString("Grid_FilterFalse"));
                    source.Add("NoResult", GetString("Grid_NoResult"));
                    source.Add("ClearFilter", GetString("Grid_ClearFilter"));
                    source.Add("NumberFilter", GetString("Grid_NumberFilter"));
                    source.Add("TextFilter", GetString("Grid_TextFilter"));
                    source.Add("DateFilter", GetString("Grid_DateFilter"));
                    source.Add("DateTimeFilter", GetString("Grid_DateTimeFilter"));
                    source.Add("MatchCase", GetString("Grid_MatchCase"));
                    source.Add("Between", GetString("Grid_Between"));
                    source.Add("CustomFilter", GetString("Grid_CustomFilter"));
                    source.Add("CustomFilterPlaceHolder", GetString("Grid_CustomFilterPlaceHolder"));
                    source.Add("CustomFilterDatePlaceHolder", GetString("Grid_CustomFilterDatePlaceHolder"));
                    source.Add("AND", GetString("Grid_AND"));
                    source.Add("OR", GetString("Grid_OR"));
                    source.Add("ShowRowsWhere", GetString("Grid_ShowRowsWhere"));
                    source.Add("FilterMenuDialogARIA", GetString("Grid_FilterMenuDialogARIA"));
                    source.Add("ExcelFilterDialogARIA", GetString("Grid_ExcelFilterDialogARIA"));
                    source.Add("DialogEditARIA", GetString("Grid_DialogEditARIA"));
                    source.Add("ColumnChooserDialogARIA", GetString("Grid_ColumnChooserDialogARIA"));
                    source.Add("ColumnMenuDialogARIA", GetString("Grid_ColumnMenuDialogARIA"));
                    source.Add("CustomFilterDialogARIA", GetString("Grid_CustomFilterDialogARIA"));
                    break;

                case "inplace-editor":
                    source.Add("save", GetString("InPlaceEditor_Save"));
                    source.Add("cancel", GetString("InPlaceEditor_Cancel"));
                    source.Add("loadingText", GetString("InPlaceEditor_LoadingText"));
                    source.Add("editIcon", GetString("InPlaceEditor_EditIcon"));
                    source.Add("editAreaClick", GetString("InPlaceEditor_EditAreaClick"));
                    source.Add("editAreaDoubleClick", GetString("InPlaceEditor_EditAreaDoubleClick"));
                    break;

                case "kanban":
                    source.Add("items", GetString("Kanban_Items"));
                    source.Add("min", GetString("Kanban_Min"));
                    source.Add("max", GetString("Kanban_Max"));
                    source.Add("cardsSelected", GetString("Kanban_CardsSelected"));
                    source.Add("addTitle", GetString("Kanban_AddTitle"));
                    source.Add("editTitle", GetString("Kanban_EditTitle"));
                    source.Add("deleteTitle", GetString("Kanban_DeleteTitle"));
                    source.Add("deleteContent", GetString("Kanban_DeleteContent"));
                    source.Add("save", GetString("Kanban_Save"));
                    source.Add("delete", GetString("Kanban_Delete"));
                    source.Add("cancel", GetString("Kanban_Cancel"));
                    source.Add("yes", GetString("Kanban_Yes"));
                    source.Add("no", GetString("Kanban_No"));
                    break;

                case "listbox":
                    source.Add("noRecordsTemplate", GetString("ListBox_NoRecordsTemplate"));
                    source.Add("actionFailureTemplate", GetString("ListBox_ActionFailureTemplate"));
                    source.Add("selectAllText", GetString("ListBox_SelectAllText"));
                    source.Add("unSelectAllText", GetString("ListBox_UnSelectAllText"));
                    source.Add("moveUp", GetString("ListBox_MoveUp"));
                    source.Add("moveDown", GetString("ListBox_MoveDown"));
                    source.Add("moveTo", GetString("ListBox_MoveTo"));
                    source.Add("moveFrom", GetString("ListBox_MoveFrom"));
                    source.Add("moveAllTo", GetString("ListBox_MoveAllTo"));
                    source.Add("moveAllFrom", GetString("ListBox_MoveAllFrom"));
                    break;

                case "maps":
                    source.Add("ZoomIn", GetString("Maps_ZoomIn"));
                    source.Add("Zoom", GetString("Maps_Zoom"));
                    source.Add("ZoomOut", GetString("Maps_ZoomOut"));
                    source.Add("Pan", GetString("Maps_Pan"));
                    source.Add("Reset", GetString("Maps_Reset"));
                    break;

                case "multi-select":
                    source.Add("noRecordsTemplate", GetString("MultiSelect_NoRecordsTemplate"));
                    source.Add("actionFailureTemplate", GetString("MultiSelect_ActionFailureTemplate"));
                    source.Add("overflowCountTemplate", GetString("MultiSelect_OverflowCountTemplate"));
                    source.Add("selectAllText", GetString("MultiSelect_SelectAllText"));
                    source.Add("unSelectAllText", GetString("MultiSelect_UnSelectAllText"));
                    source.Add("totalCountTemplate", GetString("MultiSelect_TotalCountTemplate"));
                    break;

                case "numerictextbox":
                    source.Add("incrementTitle", GetString("NumericTextBox_IncrementTitle"));
                    source.Add("decrementTitle", GetString("Uploader_DecrementTitle"));
                    break;

                case "pager":
                    source.Add("CurrentPageInfo", GetString("Pager_CurrentPageInfo"));
                    source.Add("TotalItemsInfo", GetString("Pager_TotalItemsInfo"));
                    source.Add("FirstPageTooltip", GetString("Pager_FirstPageTooltip"));
                    source.Add("LastPageTooltip", GetString("Pager_LastPageTooltip"));
                    source.Add("NextPageTooltip", GetString("Pager_NextPageTooltip"));
                    source.Add("PreviousPageTooltip", GetString("Pager_PreviousPageTooltip"));
                    source.Add("NextPagerTooltip", GetString("Pager_NextPagerTooltip"));
                    source.Add("PreviousPagerTooltip", GetString("Pager_PreviousPagerTooltip"));
                    source.Add("PagerDropDown", GetString("Pager_PagerDropDown"));
                    source.Add("PagerAllDropDown", GetString("Pager_PagerAllDropDown"));
                    source.Add("All", GetString("Pager_All"));
                    break;

                case "pivotfieldlist":
                    source.Add("staticFieldList", GetString("PivotFieldList_StaticFieldList"));
                    source.Add("fieldList", GetString("PivotFieldList_FieldList"));
                    source.Add("dropFilterPrompt", GetString("PivotFieldList_FilterAxisWatermark"));
                    source.Add("dropColPrompt", GetString("PivotFieldList_ColumnAxisWatermark"));
                    source.Add("dropRowPrompt", GetString("PivotFieldList_RowAxisWatermark"));
                    source.Add("dropValPrompt", GetString("PivotFieldList_ValueAxisWatermark"));
                    source.Add("Add field here", GetString("PivotFieldList_AddFieldMessage"));
                    source.Add("Choose field", GetString("PivotFieldList_ChooseFieldMessage"));
                    source.Add("centerHeader", GetString("PivotFieldList_DragFieldsMessage"));
                    source.Add("add", GetString("PivotFieldList_Add"));
                    source.Add("drag", GetString("PivotFieldList_Drag"));
                    source.Add("filter", GetString("PivotFieldList_Filter"));
                    source.Add("filtered", GetString("PivotFieldList_Filtered"));
                    source.Add("sort", GetString("PivotFieldList_Sort"));
                    source.Add("remove", GetString("PivotFieldList_Remove"));
                    source.Add("filters", GetString("PivotFieldList_Filters"));
                    source.Add("rows", GetString("PivotFieldList_Rows"));
                    source.Add("columns", GetString("PivotFieldList_Columns"));
                    source.Add("values", GetString("PivotFieldList_Values"));
                    source.Add("CalculatedField", GetString("PivotFieldList_CalculatedField"));
                    source.Add("createCalculatedField", GetString("PivotFieldList_CreateCalculatedField"));
                    source.Add("fieldName", GetString("PivotFieldList_CalculatedField_NameWatermark"));
                    source.Add("error", GetString("PivotFieldList_Error"));
                    source.Add("invalidFormula", GetString("PivotFieldList_InvalidFormula"));
                    source.Add("dropText", GetString("PivotFieldList_CalculatedField_ExampleWatermark"));
                    source.Add("dropTextMobile", GetString("PivotFieldList_CalculatedField_MobileWatermark"));
                    source.Add("dropAction", GetString("PivotFieldList_CalculatedField_DropMessage"));
                    source.Add("search", GetString("PivotFieldList_Search"));
                    source.Add("close", GetString("PivotFieldList_Close"));
                    source.Add("cancel", GetString("PivotFieldList_Cancel"));
                    source.Add("delete", GetString("PivotFieldList_Delete"));
                    source.Add("alert", GetString("PivotFieldList_Alert"));
                    source.Add("warning", GetString("PivotFieldList_Warning"));
                    source.Add("ok", GetString("PivotFieldList_OK"));
                    source.Add("allFields", GetString("PivotFieldList_AllFields"));
                    source.Add("formula", GetString("PivotFieldList_Formula"));
                    source.Add("fieldExist", GetString("PivotFieldList_CalculatedField_ExistMessage"));
                    source.Add("confirmText", GetString("PivotFieldList_CalculatedField_ConfirmMessage"));
                    source.Add("noMatches", GetString("PivotFieldList_NoMatchesMessage"));
                    source.Add("format", GetString("PivotFieldList_Summaries"));
                    source.Add("edit", GetString("PivotFieldList_Edit"));
                    source.Add("clear", GetString("PivotFieldList_Clear"));
                    source.Add("formulaField", GetString("PivotFieldList_CalculatedField_DragDropMessage"));
                    source.Add("dragField", GetString("PivotFieldList_CalculatedField_DragMessage"));
                    source.Add("clearFilter", GetString("PivotFieldList_ClearFilter"));
                    source.Add("by", GetString("PivotFieldList_By"));
                    source.Add("enterValue", GetString("PivotFieldList_EnterValue"));
                    source.Add("chooseDate", GetString("PivotFieldList_EnterDate"));
                    source.Add("all", GetString("PivotFieldList_All"));
                    source.Add("multipleItems", GetString("PivotFieldList_MultipleItems"));
                    source.Add("Equals", GetString("PivotFieldList_Equals"));
                    source.Add("DoesNotEquals", GetString("PivotFieldList_DoesNotEquals"));
                    source.Add("BeginWith", GetString("PivotFieldList_BeginWith"));
                    source.Add("DoesNotBeginWith", GetString("PivotFieldList_DoesNotBeginWith"));
                    source.Add("EndsWith", GetString("PivotFieldList_EndsWith"));
                    source.Add("DoesNotEndsWith", GetString("PivotFieldList_DoesNotEndsWith"));
                    source.Add("Contains", GetString("PivotFieldList_Contains"));
                    source.Add("DoesNotContains", GetString("PivotFieldList_DoesNotContains"));
                    source.Add("GreaterThan", GetString("PivotFieldList_GreaterThan"));
                    source.Add("GreaterThanOrEqualTo", GetString("PivotFieldList_GreaterThanOrEqualTo"));
                    source.Add("LessThan", GetString("PivotFieldList_LessThan"));
                    source.Add("LessThanOrEqualTo", GetString("PivotFieldList_LessThanOrEqualTo"));
                    source.Add("Between", GetString("PivotFieldList_Between"));
                    source.Add("NotBetween", GetString("PivotFieldList_NotBetween"));
                    source.Add("Before", GetString("PivotFieldList_Before"));
                    source.Add("BeforeOrEqualTo", GetString("PivotFieldList_BeforeOrEqualTo"));
                    source.Add("After", GetString("PivotFieldList_After"));
                    source.Add("AfterOrEqualTo", GetString("PivotFieldList_AfterOrEqualTo"));
                    source.Add("member", GetString("PivotFieldList_Member"));
                    source.Add("label", GetString("PivotFieldList_Label"));
                    source.Add("date", GetString("PivotFieldList_Date"));
                    source.Add("value", GetString("PivotFieldList_Value"));
                    source.Add("labelTextContent", GetString("PivotFieldList_LabelTextMessage"));
                    source.Add("dateTextContent", GetString("PivotFieldList_DateTextMessage"));
                    source.Add("valueTextContent", GetString("PivotFieldList_ValueTextMessage"));
                    source.Add("And", GetString("PivotFieldList_And"));
                    source.Add("Sum", GetString("PivotFieldList_Sum"));
                    source.Add("Count", GetString("PivotFieldList_Count"));
                    source.Add("DistinctCount", GetString("PivotFieldList_DistinctCount"));
                    source.Add("Product", GetString("PivotFieldList_Product"));
                    source.Add("Avg", GetString("PivotFieldList_Avg"));
                    source.Add("Min", GetString("PivotFieldList_Min"));
                    source.Add("Max", GetString("PivotFieldList_Max"));
                    source.Add("Index", GetString("PivotFieldList_Index"));
                    source.Add("SampleStDev", GetString("PivotFieldList_SampleStDev"));
                    source.Add("PopulationStDev", GetString("PivotFieldList_PopulationStDev"));
                    source.Add("SampleVar", GetString("PivotFieldList_SampleVar"));
                    source.Add("PopulationVar", GetString("PivotFieldList_PopulationVar"));
                    source.Add("RunningTotals", GetString("PivotFieldList_RunningTotals"));
                    source.Add("DifferenceFrom", GetString("PivotFieldList_DifferenceFrom"));
                    source.Add("PercentageOfDifferenceFrom", GetString("PivotFieldList_PercentageOfDifferenceFrom"));
                    source.Add("PercentageOfGrandTotal", GetString("PivotFieldList_PercentageOfGrandTotal"));
                    source.Add("PercentageOfColumnTotal", GetString("PivotFieldList_PercentageOfColumnTotal"));
                    source.Add("PercentageOfRowTotal", GetString("PivotFieldList_PercentageOfRowTotal"));
                    source.Add("PercentageOfParentTotal", GetString("PivotFieldList_PercentageOfParentTotal"));
                    source.Add("PercentageOfParentColumnTotal", GetString("PivotFieldList_PercentageOfParentColumnTotal"));
                    source.Add("PercentageOfParentRowTotal", GetString("PivotFieldList_PercentageOfParentRowTotal"));
                    source.Add("Years", GetString("PivotFieldList_Years"));
                    source.Add("Quarters", GetString("PivotFieldList_Quarters"));
                    source.Add("Months", GetString("PivotFieldList_Months"));
                    source.Add("Days", GetString("PivotFieldList_Days"));
                    source.Add("Hours", GetString("PivotFieldList_Hours"));
                    source.Add("Minutes", GetString("PivotFieldList_Minutes"));
                    source.Add("Seconds", GetString("PivotFieldList_Seconds"));
                    source.Add("apply", GetString("PivotFieldList_Apply"));
                    source.Add("valueFieldSettings", GetString("PivotFieldList_ValueFieldSettings"));
                    source.Add("sourceName", GetString("PivotFieldList_FieldNameMessage"));
                    source.Add("sourceCaption", GetString("PivotFieldList_FieldCaptionMessage"));
                    source.Add("summarizeValuesBy", GetString("PivotFieldList_SummarizeValuesBy"));
                    source.Add("baseField", GetString("PivotFieldList_BaseField"));
                    source.Add("baseItem", GetString("PivotFieldList_BaseItem"));
                    source.Add("example", GetString("PivotFieldList_Example"));
                    source.Add("editorDataLimitMsg", GetString("PivotFieldList_MemberLimitMessage"));
                    source.Add("deferLayoutUpdate", GetString("PivotFieldList_DeferLayoutUpdate"));
                    source.Add("null", GetString("PivotFieldList_Null"));
                    source.Add("undefined", GetString("PivotFieldList_Undefined"));
                    source.Add("groupOutOfRange", GetString("PivotFieldList_OutOfRange"));
                    source.Add("fieldDropErrorAction", GetString("PivotFieldList_FieldDropErrorMessage"));
                    source.Add("MoreOption", GetString("PivotFieldList_MoreOption"));
                    source.Add("memberType", GetString("PivotFieldList_FieldType"));
                    source.Add("selectedHierarchy", GetString("PivotFieldList_ParentHierarchy"));
                    source.Add("expressionField", GetString("PivotFieldList_Expression"));
                    source.Add("olapDropText", GetString("PivotFieldList_CalculatedField_OLAPExampleWatermark"));
                    source.Add("customFormat", GetString("PivotFieldList_CustomFormat"));
                    source.Add("Measure", GetString("PivotFieldList_Measure"));
                    source.Add("Dimension", GetString("PivotFieldList_Dimension"));
                    source.Add("Standard", GetString("PivotFieldList_Standard"));
                    source.Add("Currency", GetString("PivotFieldList_Currency"));
                    source.Add("Percent", GetString("PivotFieldList_Percent"));
                    source.Add("Custom", GetString("PivotFieldList_Custom"));
                    source.Add("blank", GetString("PivotFieldList_Blank"));
                    source.Add("fieldTooltip", GetString("PivotFieldList_CalculatedField_Tooltip"));
                    source.Add("fieldTitle", GetString("PivotFieldList_FieldName"));
                    source.Add("QuarterYear", GetString("PivotFieldList_QuarterYear"));
                    source.Add("caption", GetString("PivotFieldList_FieldCaption"));
                    source.Add("copy", GetString("PivotFieldList_Copy"));
                    source.Add("group", GetString("PivotFieldList_Group"));
                    source.Add("removeCalculatedField", GetString("PivotFieldList_CalculatedField_RemoveMessage"));
                    source.Add("yes", GetString("PivotFieldList_Yes"));
                    source.Add("no", GetString("PivotFieldList_No"));
                    source.Add("numberFormatString", GetString("PivotFieldList_NumberFormat_ExampleWatermark"));
                    source.Add("sortNone", GetString("PivotFieldList_SortNone_TooltipMessage"));
                    source.Add("sortAscending", GetString("PivotFieldList_SortAscending_TooltipMessage"));
                    source.Add("sortDescending", GetString("PivotFieldList_SortDescending_TooltipMessage"));
                    source.Add("editCalculatedField", GetString("PivotFieldList_CalculatedField_EditTooltipMessage"));
                    source.Add("clearCalculatedField", GetString("PivotFieldList_CalculatedField_ClearTooltipMessage"));
                    source.Add("of", GetString("PivotFieldList_Of"));
                    source.Add("formatLabel", GetString("PivotFieldList_Format"));
                    break;

                case "pivotview":
                    source.Add("grandTotal", GetString("PivotView_GrandTotal"));
                    source.Add("total", GetString("PivotView_Total"));
                    source.Add("value", GetString("PivotView_Value"));
                    source.Add("noValue", GetString("PivotView_NoValue"));
                    source.Add("row", GetString("PivotView_Row"));
                    source.Add("column", GetString("PivotView_Column"));
                    source.Add("collapse", GetString("PivotView_Collapse"));
                    source.Add("expand", GetString("PivotView_Expand"));
                    source.Add("rowAxisPrompt", GetString("PivotView_RowAxisWatermark"));
                    source.Add("columnAxisPrompt", GetString("PivotView_ColumnAxisWatermark"));
                    source.Add("valueAxisPrompt", GetString("PivotView_ValueAxisWatermark"));
                    source.Add("filterAxisPrompt", GetString("PivotView_FilterAxisWatermark"));
                    source.Add("filter", GetString("PivotView_Filter"));
                    source.Add("filtered", GetString("PivotView_Filtered"));
                    source.Add("sort", GetString("PivotView_Sort"));
                    source.Add("filters", GetString("PivotView_Filters"));
                    source.Add("rows", GetString("PivotView_Rows"));
                    source.Add("columns", GetString("PivotView_Columns"));
                    source.Add("values", GetString("PivotView_Values"));
                    source.Add("close", GetString("PivotView_Close"));
                    source.Add("cancel", GetString("PivotView_Cancel"));
                    source.Add("delete", GetString("PivotView_Delete"));
                    source.Add("CalculatedField", GetString("PivotView_CalculatedField"));
                    source.Add("createCalculatedField", GetString("PivotView_CreateCalculatedField"));
                    source.Add("fieldName", GetString("PivotView_CalculatedField_NameWatermark"));
                    source.Add("error", GetString("PivotView_Error"));
                    source.Add("invalidFormula", GetString("PivotView_InvalidFormula"));
                    source.Add("dropText", GetString("PivotView_CalculatedField_ExampleWatermark"));
                    source.Add("dropTextMobile", GetString("PivotView_CalculatedField_MobileWatermark"));
                    source.Add("dropAction", GetString("PivotView_CalculatedField_DropMessage"));
                    source.Add("alert", GetString("PivotView_Alert"));
                    source.Add("warning", GetString("PivotView_Warning"));
                    source.Add("ok", GetString("PivotView_OK"));
                    source.Add("search", GetString("PivotView_Search"));
                    source.Add("drag", GetString("PivotView_Drag"));
                    source.Add("remove", GetString("PivotView_Remove"));
                    source.Add("allFields", GetString("PivotView_AllFields"));
                    source.Add("formula", GetString("PivotView_Formula"));
                    source.Add("addToRow", GetString("PivotView_AddToRow"));
                    source.Add("addToColumn", GetString("PivotView_AddToColumn"));
                    source.Add("addToValue", GetString("PivotView_AddToValue"));
                    source.Add("addToFilter", GetString("PivotView_AddToFilter"));
                    source.Add("emptyData", GetString("PivotView_EmptyRecordsMessage"));
                    source.Add("fieldExist", GetString("PivotView_CalculatedField_ExistMessage"));
                    source.Add("confirmText", GetString("PivotView_CalculatedField_ConfirmMessage"));
                    source.Add("noMatches", GetString("PivotView_NoMatchesMessage"));
                    source.Add("format", GetString("PivotView_Summaries"));
                    source.Add("edit", GetString("PivotView_Edit"));
                    source.Add("clear", GetString("PivotView_Clear"));
                    source.Add("formulaField", GetString("PivotView_CalculatedField_DragDropMessage"));
                    source.Add("dragField", GetString("PivotView_CalculatedField_DragMessage"));
                    source.Add("clearFilter", GetString("PivotView_ClearFilter"));
                    source.Add("by", GetString("PivotView_By"));
                    source.Add("all", GetString("PivotView_All"));
                    source.Add("multipleItems", GetString("PivotView_MultipleItems"));
                    source.Add("member", GetString("PivotView_Member"));
                    source.Add("label", GetString("PivotView_Label"));
                    source.Add("date", GetString("PivotView_Date"));
                    source.Add("enterValue", GetString("PivotView_EnterValue"));
                    source.Add("chooseDate", GetString("PivotView_EnterDate"));
                    source.Add("Before", GetString("PivotView_Before"));
                    source.Add("BeforeOrEqualTo", GetString("PivotView_BeforeOrEqualTo"));
                    source.Add("After", GetString("PivotView_After"));
                    source.Add("AfterOrEqualTo", GetString("PivotView_AfterOrEqualTo"));
                    source.Add("labelTextContent", GetString("PivotView_LabelTextMessage"));
                    source.Add("dateTextContent", GetString("PivotView_DateTextMessage"));
                    source.Add("valueTextContent", GetString("PivotView_ValueTextMessage"));
                    source.Add("Equals", GetString("PivotView_Equals"));
                    source.Add("DoesNotEquals", GetString("PivotView_DoesNotEquals"));
                    source.Add("BeginWith", GetString("PivotView_BeginWith"));
                    source.Add("DoesNotBeginWith", GetString("PivotView_DoesNotBeginWith"));
                    source.Add("EndsWith", GetString("PivotView_EndsWith"));
                    source.Add("DoesNotEndsWith", GetString("PivotView_DoesNotEndsWith"));
                    source.Add("Contains", GetString("PivotView_Contains"));
                    source.Add("DoesNotContains", GetString("PivotView_DoesNotContains"));
                    source.Add("GreaterThan", GetString("PivotView_GreaterThan"));
                    source.Add("GreaterThanOrEqualTo", GetString("PivotView_GreaterThanOrEqualTo"));
                    source.Add("LessThan", GetString("PivotView_LessThan"));
                    source.Add("LessThanOrEqualTo", GetString("PivotView_LessThanOrEqualTo"));
                    source.Add("Between", GetString("PivotView_Between"));
                    source.Add("NotBetween", GetString("PivotView_NotBetween"));
                    source.Add("And", GetString("PivotView_And"));
                    source.Add("Sum", GetString("PivotView_Sum"));
                    source.Add("Count", GetString("PivotView_Count"));
                    source.Add("DistinctCount", GetString("PivotView_DistinctCount"));
                    source.Add("Product", GetString("PivotView_Product"));
                    source.Add("Avg", GetString("PivotView_Avg"));
                    source.Add("Min", GetString("PivotView_Min"));
                    source.Add("SampleVar", GetString("PivotView_SampleVar"));
                    source.Add("PopulationVar", GetString("PivotView_PopulationVar"));
                    source.Add("RunningTotals", GetString("PivotView_RunningTotals"));
                    source.Add("Max", GetString("PivotView_Max"));
                    source.Add("Index", GetString("PivotView_Index"));
                    source.Add("SampleStDev", GetString("PivotView_SampleStDev"));
                    source.Add("PopulationStDev", GetString("PivotView_PopulationStDev"));
                    source.Add("PercentageOfRowTotal", GetString("PivotView_PercentageOfRowTotal"));
                    source.Add("PercentageOfParentTotal", GetString("PivotView_PercentageOfParentTotal"));
                    source.Add("PercentageOfParentColumnTotal", GetString("PivotView_PercentageOfParentColumnTotal"));
                    source.Add("PercentageOfParentRowTotal", GetString("PivotView_PercentageOfParentRowTotal"));
                    source.Add("DifferenceFrom", GetString("PivotView_DifferenceFrom"));
                    source.Add("PercentageOfDifferenceFrom", GetString("PivotView_PercentageOfDifferenceFrom"));
                    source.Add("PercentageOfGrandTotal", GetString("PivotView_PercentageOfGrandTotal"));
                    source.Add("PercentageOfColumnTotal", GetString("PivotView_PercentageOfColumnTotal"));
                    source.Add("NotEquals", GetString("PivotView_NotEquals"));
                    source.Add("AllValues", GetString("PivotView_AllValues"));
                    source.Add("conditionalFormating", GetString("PivotView_ConditionalFormating"));
                    source.Add("apply", GetString("PivotView_Apply"));
                    source.Add("condition", GetString("PivotView_AddCondition"));
                    source.Add("formatLabel", GetString("PivotView_Format"));
                    source.Add("valueFieldSettings", GetString("PivotView_ValueFieldSettings"));
                    source.Add("baseField", GetString("PivotView_BaseField"));
                    source.Add("baseItem", GetString("PivotView_BaseItem"));
                    source.Add("summarizeValuesBy", GetString("PivotView_SummarizeValuesBy"));
                    source.Add("sourceName", GetString("PivotView_FieldNameMessage"));
                    source.Add("sourceCaption", GetString("PivotView_FieldCaptionMessage"));
                    source.Add("example", GetString("PivotView_Example"));
                    source.Add("editorDataLimitMsg", GetString("PivotView_MemberLimitMessage"));
                    source.Add("details", GetString("PivotView_Details"));
                    source.Add("manageRecords", GetString("PivotView_ManageRecords"));
                    source.Add("Years", GetString("PivotView_Years"));
                    source.Add("Quarters", GetString("PivotView_Quarters"));
                    source.Add("Months", GetString("PivotView_Months"));
                    source.Add("Days", GetString("PivotView_Days"));
                    source.Add("Hours", GetString("PivotView_Hours"));
                    source.Add("Minutes", GetString("PivotView_Minutes"));
                    source.Add("Seconds", GetString("PivotView_Seconds"));
                    source.Add("save", GetString("PivotView_SaveReport"));
                    source.Add("new", GetString("PivotView_NewReport"));
                    source.Add("load", GetString("PivotView_LoadReport"));
                    source.Add("saveAs", GetString("PivotView_SaveAsReport"));
                    source.Add("rename", GetString("PivotView_RenameReport"));
                    source.Add("deleteReport", GetString("PivotView_DeleteReport"));
                    source.Add("export", GetString("PivotView_Export"));
                    source.Add("subTotals", GetString("PivotView_Subtotals"));
                    source.Add("grandTotals", GetString("PivotView_GrandTotals"));
                    source.Add("reportName", GetString("PivotView_ReportNameMessage"));
                    source.Add("pdf", GetString("PivotView_PDF"));
                    source.Add("excel", GetString("PivotView_Excel"));
                    source.Add("csv", GetString("PivotView_CSV"));
                    source.Add("png", GetString("PivotView_PNG"));
                    source.Add("jpeg", GetString("PivotView_JPEG"));
                    source.Add("svg", GetString("PivotView_SVG"));
                    source.Add("mdxQuery", GetString("PivotView_MdxQuery"));
                    source.Add("showSubTotals", GetString("PivotView_ShowSubtotals"));
                    source.Add("doNotShowSubTotals", GetString("PivotView_DoNotShowSubtotals"));
                    source.Add("showSubTotalsRowsOnly", GetString("PivotView_ShowRowSubtotalsOnly"));
                    source.Add("showSubTotalsColumnsOnly", GetString("PivotView_ShowColumnSubtotalsOnly"));
                    source.Add("showGrandTotals", GetString("PivotView_ShowGrandTotals"));
                    source.Add("doNotShowGrandTotals", GetString("PivotView_DoNotShowGrandTotals"));
                    source.Add("showGrandTotalsRowsOnly", GetString("PivotView_ShowRowGrandTotalsOnly"));
                    source.Add("showGrandTotalsColumnsOnly", GetString("PivotView_ShowColumnGrandTotalsOnly"));
                    source.Add("fieldList", GetString("PivotView_ShowFieldList"));
                    source.Add("grid", GetString("PivotView_ShowTable"));
                    source.Add("toolbarFormatting", GetString("PivotView_ConditionalFormatting"));
                    source.Add("chart", GetString("PivotView_Chart"));
                    source.Add("reportMsg", GetString("PivotView_ValidReportNameMessage"));
                    source.Add("reportList", GetString("PivotView_ReportList"));
                    source.Add("removeConfirm", GetString("PivotView_RemoveReportConfirmMessage"));
                    source.Add("emptyReport", GetString("PivotView_EmptyReportMessage"));
                    source.Add("bar", GetString("PivotView_Bar"));
                    source.Add("line", GetString("PivotView_Line"));
                    source.Add("area", GetString("PivotView_Area"));
                    source.Add("scatter", GetString("PivotView_Scatter"));
                    source.Add("polar", GetString("PivotView_Polar"));
                    source.Add("of", GetString("PivotView_Of"));
                    source.Add("emptyFormat", GetString("PivotView_NoFormatMessage"));
                    source.Add("emptyInput", GetString("PivotView_NoInputMessage"));
                    source.Add("newReportConfirm", GetString("PivotView_NewReportConfirmMessage"));
                    source.Add("emptyReportName", GetString("PivotView_EnterReportNameMessage"));
                    source.Add("qtr", GetString("PivotView_Quarter"));
                    source.Add("null", GetString("PivotView_Null"));
                    source.Add("undefined", GetString("PivotView_Undefined"));
                    source.Add("groupOutOfRange", GetString("PivotView_OutOfRange"));
                    source.Add("fieldDropErrorAction", GetString("PivotView_FieldDropErrorMessage"));
                    source.Add("MoreOption", GetString("PivotView_MoreOption"));
                    source.Add("aggregate", GetString("PivotView_Aggregate"));
                    source.Add("drillThrough", GetString("PivotView_DrillThrough"));
                    source.Add("ascending", GetString("PivotView_Ascending"));
                    source.Add("descending", GetString("PivotView_Descending"));
                    source.Add("number", GetString("PivotView_Number"));
                    source.Add("currency", GetString("PivotView_Currency"));
                    source.Add("percentage", GetString("PivotView_Percentage"));
                    source.Add("formatType", GetString("PivotView_FormatType"));
                    source.Add("customText", GetString("PivotView_CurrencySymbol"));
                    source.Add("symbolPosition", GetString("PivotView_SymbolPosition"));
                    source.Add("left", GetString("PivotView_Left"));
                    source.Add("right", GetString("PivotView_Right"));
                    source.Add("grouping", GetString("PivotView_Grouping"));
                    source.Add("true", GetString("PivotView_True"));
                    source.Add("false", GetString("PivotView_False"));
                    source.Add("decimalPlaces", GetString("PivotView_DecimalPlaces"));
                    source.Add("numberFormat", GetString("PivotView_NumberFormatting"));
                    source.Add("memberType", GetString("PivotView_FieldType"));
                    source.Add("formatString", GetString("PivotView_FormatString"));
                    source.Add("expressionField", GetString("PivotView_Expression"));
                    source.Add("customFormat", GetString("PivotView_CustomFormatMessage"));
                    source.Add("selectedHierarchy", GetString("PivotView_ParentHierarchy"));
                    source.Add("olapDropText", GetString("PivotView_CalculatedField_OLAPExampleWatermark"));
                    source.Add("Percent", GetString("PivotView_Percent"));
                    source.Add("Custom", GetString("PivotView_Custom"));
                    source.Add("Measure", GetString("PivotView_Measure"));
                    source.Add("Dimension", GetString("PivotView_Dimension"));
                    source.Add("Standard", GetString("PivotView_Standard"));
                    source.Add("blank", GetString("sfBlazorLocale[PivotView_Blank"));
                    source.Add("fieldTooltip", GetString("sfBlazorLocale[PivotView_CalculatedField_Tooltip"));
                    source.Add("QuarterYear", GetString("PivotView_QuarterYear"));
                    source.Add("fieldTitle", GetString("PivotView_FieldName"));
                    source.Add("drillError", GetString("PivotView_DrillThroughErrorMessage"));
                    source.Add("caption", GetString("PivotView_FieldCaption"));
                    source.Add("copy", GetString("PivotView_Copy"));
                    source.Add("defaultReport", GetString("PivotView_SampleReport"));
                    source.Add("customFormatString", GetString("PivotView_CustomFormat"));
                    source.Add("invalidFormat", GetString("PivotView_InvalidFormat"));
                    source.Add("group", GetString("PivotView_Group"));
                    source.Add("unGroup", GetString("PivotView_Ungroup"));
                    source.Add("invalidSelection", GetString("PivotView_InvalidGroupSelectionMessage"));
                    source.Add("groupName", GetString("PivotView_GroupCaptionMessage"));
                    source.Add("captionName", GetString("PivotView_GroupFieldCaptionMessage"));
                    source.Add("selectedItems", GetString("PivotView_SelectedItems"));
                    source.Add("groupFieldCaption", GetString("PivotView_GroupFieldCaption"));
                    source.Add("groupTitle", GetString("PivotView_GroupName"));
                    source.Add("startAt", GetString("PivotView_StartAt"));
                    source.Add("endAt", GetString("PivotView_EndAt"));
                    source.Add("groupBy", GetString("PivotView_IntervalBy"));
                    source.Add("selectGroup", GetString("PivotView_SelectGroups"));
                    source.Add("multipleAxes", GetString("PivotView_MultipleAxes"));
                    source.Add("chartTypeSettings", GetString("PivotView_ChartTypeSettings"));
                    source.Add("ChartType", GetString("PivotView_ChartType"));
                    source.Add("yes", GetString("PivotView_Yes"));
                    source.Add("no", GetString("PivotView_No"));
                    source.Add("numberFormatMenu", GetString("PivotView_NumberFormatMenu"));
                    source.Add("conditionalFormatingMenu", GetString("PivotView_ConditionalFormatingMenu"));
                    source.Add("removeCalculatedField", GetString("PivotView_CalculatedField_RemoveMessage"));
                    source.Add("stackingarea", GetString("PivotView_StackedArea"));
                    source.Add("stackingcolumn", GetString("PivotView_StackedColumn"));
                    source.Add("stackingbar", GetString("PivotView_StackedBar"));
                    source.Add("stepline", GetString("PivotView_StepLine"));
                    source.Add("steparea", GetString("PivotView_StepArea"));
                    source.Add("splinearea", GetString("PivotView_SplineArea"));
                    source.Add("spline", GetString("PivotView_Spline"));
                    source.Add("stackingcolumn100", GetString("PivotView_StackedColumn100"));
                    source.Add("stackingbar100", GetString("PivotView_StackedBar100"));
                    source.Add("stackingarea100", GetString("PivotView_StackedArea100"));
                    source.Add("bubble", GetString("PivotView_Bubble"));
                    source.Add("pareto", GetString("PivotView_Pareto"));
                    source.Add("radar", GetString("PivotView_Radar"));
                    source.Add("editCalculatedField", GetString("PivotView_CalculatedField_EditTooltipMessage"));
                    source.Add("clearCalculatedField", GetString("PivotView_CalculatedField_ClearTooltipMessage"));
                    break;

                case "querybuilder":
                    source.Add("StartsWith", GetString("QueryBuilder_StartsWith"));
                    source.Add("EndsWith", GetString("QueryBuilder_EndsWith"));
                    source.Add("Contains", GetString("QueryBuilder_Contains"));
                    source.Add("Equal", GetString("QueryBuilder_Equal"));
                    source.Add("NotEqual", GetString("QueryBuilder_NotEqual"));
                    source.Add("LessThan", GetString("QueryBuilder_LessThan"));
                    source.Add("LessThanOrEqual", GetString("QueryBuilder_LessThanOrEqual"));
                    source.Add("GreaterThan", GetString("QueryBuilder_GreaterThan"));
                    source.Add("GreaterThanOrEqual", GetString("QueryBuilder_GreaterThanOrEqual"));
                    source.Add("Between", GetString("QueryBuilder_Between"));
                    source.Add("NotBetween", GetString("QueryBuilder_NotBetween"));
                    source.Add("Empty", GetString("QueryBuilder_Empty"));
                    source.Add("NotEmpty", GetString("QueryBuilder_NotEmpty"));
                    source.Add("In", GetString("QueryBuilder_In"));
                    source.Add("NotIn", GetString("QueryBuilder_NotIn"));
                    source.Add("NotContains", GetString("QueryBuilder_NotContains"));
                    source.Add("Remove", GetString("QueryBuilder_Remove"));
                    source.Add("SelectField", GetString("QueryBuilder_SelectField"));
                    source.Add("SelectOperator", GetString("QueryBuilder_SelectOperator"));
                    source.Add("DeleteRule", GetString("QueryBuilder_DeleteRule"));
                    source.Add("DeleteGroup", GetString("QueryBuilder_DeleteGroup"));
                    source.Add("AddGroup", GetString("QueryBuilder_AddGroup"));
                    source.Add("AddCondition", GetString("QueryBuilder_AddCondition"));
                    source.Add("Edit", GetString("QueryBuilder_Edit"));
                    source.Add("ValidationMessage", GetString("QueryBuilder_ValidationMessage"));
                    source.Add("SummaryViewTitle", GetString("QueryBuilder_SummaryViewTitle"));
                    source.Add("OtherFields", GetString("QueryBuilder_OtherFields"));
                    source.Add("AND", GetString("QueryBuilder_AND"));
                    source.Add("OR", GetString("QueryBuilder_OR"));
                    source.Add("SelectValue", GetString("QueryBuilder_SelectValue"));
                    break;

                case "recurrenceeditor":
                    source.Add("none", GetString("RecurrenceEditor_None"));
                    source.Add("daily", GetString("RecurrenceEditor_Daily"));
                    source.Add("weekly", GetString("RecurrenceEditor_Weekly"));
                    source.Add("monthly", GetString("RecurrenceEditor_Monthly"));
                    source.Add("month", GetString("RecurrenceEditor_Month"));
                    source.Add("yearly", GetString("RecurrenceEditor_Yearly"));
                    source.Add("never", GetString("RecurrenceEditor_Never"));
                    source.Add("until", GetString("RecurrenceEditor_Until"));
                    source.Add("count", GetString("RecurrenceEditor_Count"));
                    source.Add("first", GetString("RecurrenceEditor_First"));
                    source.Add("second", GetString("RecurrenceEditor_Second"));
                    source.Add("third", GetString("RecurrenceEditor_Third"));
                    source.Add("fourth", GetString("RecurrenceEditor_Fourth"));
                    source.Add("last", GetString("RecurrenceEditor_Last"));
                    source.Add("repeat", GetString("RecurrenceEditor_Repeat"));
                    source.Add("repeatEvery", GetString("RecurrenceEditor_RepeatEvery"));
                    source.Add("on", GetString("RecurrenceEditor_On"));
                    source.Add("end", GetString("RecurrenceEditor_End"));
                    source.Add("onDay", GetString("RecurrenceEditor_OnDay"));
                    source.Add("days", GetString("RecurrenceEditor_Days"));
                    source.Add("weeks", GetString("RecurrenceEditor_Weeks"));
                    source.Add("months", GetString("RecurrenceEditor_Months"));
                    source.Add("years", GetString("RecurrenceEditor_Years"));
                    source.Add("every", GetString("RecurrenceEditor_Every"));
                    source.Add("summaryTimes", GetString("RecurrenceEditor_SummaryTimes"));
                    source.Add("summaryOn", GetString("RecurrenceEditor_SummaryOn"));
                    source.Add("summaryUntil", GetString("RecurrenceEditor_SummaryUntil"));
                    source.Add("summaryRepeat", GetString("RecurrenceEditor_SummaryRepeat"));
                    source.Add("summaryDay", GetString("RecurrenceEditor_SummaryDay"));
                    source.Add("summaryWeek", GetString("RecurrenceEditor_SummaryWeek"));
                    source.Add("summaryMonth", GetString("RecurrenceEditor_SummaryMonth"));
                    source.Add("summaryYear", GetString("RecurrenceEditor_SummaryYear"));
                    source.Add("monthWeek", GetString("RecurrenceEditor_MonthWeek"));
                    source.Add("monthPosition", GetString("RecurrenceEditor_MonthPosition"));
                    source.Add("monthExpander", GetString("RecurrenceEditor_MonthExpander"));
                    source.Add("yearExpander", GetString("RecurrenceEditor_YearExpander"));
                    source.Add("repeatInterval", GetString("RecurrenceEditor_RepeatInterval"));
                    break;

                case "richtexteditor":
                    source.Add("alignments", GetString("RichTextEditor_Alignments"));
                    source.Add("justifyLeft", GetString("RichTextEditor_JustifyLeft"));
                    source.Add("justifyCenter", GetString("RichTextEditor_JustifyCenter"));
                    source.Add("justifyRight", GetString("RichTextEditor_JustifyRight"));
                    source.Add("justifyFull", GetString("RichTextEditor_JustifyFull"));
                    source.Add("fontName", GetString("RichTextEditor_FontName"));
                    source.Add("fontSize", GetString("RichTextEditor_FontSize"));
                    source.Add("fontColor", GetString("RichTextEditor_FontColor"));
                    source.Add("backgroundColor", GetString("RichTextEditor_BackgroundColor"));
                    source.Add("bold", GetString("RichTextEditor_Bold"));
                    source.Add("italic", GetString("RichTextEditor_Italic"));
                    source.Add("underline", GetString("RichTextEditor_Underline"));
                    source.Add("strikethrough", GetString("RichTextEditor_Strikethrough"));
                    source.Add("clearFormat", GetString("RichTextEditor_ClearFormat"));
                    source.Add("clearAll", GetString("RichTextEditor_ClearAll"));
                    source.Add("cut", GetString("RichTextEditor_Cut"));
                    source.Add("copy", GetString("RichTextEditor_Copy"));
                    source.Add("paste", GetString("RichTextEditor_Paste"));
                    source.Add("unorderedList", GetString("RichTextEditor_UnorderedList"));
                    source.Add("orderedList", GetString("RichTextEditor_OrderedList"));
                    source.Add("indent", GetString("RichTextEditor_Indent"));
                    source.Add("outdent", GetString("RichTextEditor_Outdent"));
                    source.Add("undo", GetString("RichTextEditor_Undo"));
                    source.Add("redo", GetString("RichTextEditor_Redo"));
                    source.Add("superscript", GetString("RichTextEditor_Superscript"));
                    source.Add("subscript", GetString("RichTextEditor_Subscript"));
                    source.Add("createLink", GetString("RichTextEditor_CreateLink"));
                    source.Add("openLink", GetString("RichTextEditor_OpenLink"));
                    source.Add("editLink", GetString("RichTextEditor_EditLink"));
                    source.Add("removeLink", GetString("RichTextEditor_RemoveLink"));
                    source.Add("image", GetString("RichTextEditor_Image"));
                    source.Add("replace", GetString("RichTextEditor_Replace"));
                    source.Add("align", GetString("RichTextEditor_Align"));
                    source.Add("caption", GetString("RichTextEditor_Caption"));
                    source.Add("remove", GetString("RichTextEditor_Remove"));
                    source.Add("insertLink", GetString("RichTextEditor_InsertLink"));
                    source.Add("display", GetString("RichTextEditor_Display"));
                    source.Add("altText", GetString("RichTextEditor_AltText"));
                    source.Add("dimension", GetString("RichTextEditor_Dimension"));
                    source.Add("fullscreen", GetString("RichTextEditor_Fullscreen"));
                    source.Add("maximize", GetString("RichTextEditor_Maximize"));
                    source.Add("minimize", GetString("RichTextEditor_Minimize"));
                    source.Add("lowerCase", GetString("RichTextEditor_LowerCase"));
                    source.Add("upperCase", GetString("RichTextEditor_UpperCase"));
                    source.Add("print", GetString("RichTextEditor_Print"));
                    source.Add("formats", GetString("RichTextEditor_Formats"));
                    source.Add("sourcecode", GetString("RichTextEditor_Sourcecode"));
                    source.Add("preview", GetString("RichTextEditor_Preview"));
                    source.Add("viewside", GetString("RichTextEditor_Viewside"));
                    source.Add("insertCode", GetString("RichTextEditor_InsertCode"));
                    source.Add("linkText", GetString("RichTextEditor_LinkText"));
                    source.Add("linkTooltipLabel", GetString("RichTextEditor_LinkTooltipLabel"));
                    source.Add("linkWebUrl", GetString("RichTextEditor_LinkWebUrl"));
                    source.Add("linkTitle", GetString("RichTextEditor_LinkTitle"));
                    source.Add("linkurl", GetString("RichTextEditor_LinkUrl"));
                    source.Add("linkOpenInNewWindow", GetString("RichTextEditor_LinkOpenInNewWindow"));
                    source.Add("linkHeader", GetString("RichTextEditor_LinkHeader"));
                    source.Add("dialogInsert", GetString("RichTextEditor_DialogInsert"));
                    source.Add("dialogCancel", GetString("RichTextEditor_DialogCancel"));
                    source.Add("dialogUpdate", GetString("RichTextEditor_DialogUpdate"));
                    source.Add("imageHeader", GetString("RichTextEditor_ImageHeader"));
                    source.Add("imageLinkHeader", GetString("RichTextEditor_ImageLinkHeader"));
                    source.Add("mdimageLink", GetString("RichTextEditor_MdImageLink"));
                    source.Add("imageUploadMessage", GetString("RichTextEditor_ImageUploadMessage"));
                    source.Add("imageDeviceUploadMessage", GetString("RichTextEditor_ImageDeviceUploadMessage"));
                    source.Add("imageAlternateText", GetString("RichTextEditor_ImageAlternateText"));
                    source.Add("alternateHeader", GetString("RichTextEditor_AlternateHeader"));
                    source.Add("browse", GetString("RichTextEditor_Browse"));
                    source.Add("imageUrl", GetString("RichTextEditor_ImageUrl"));
                    source.Add("imageCaption", GetString("RichTextEditor_ImageCaption"));
                    source.Add("imageSizeHeader", GetString("RichTextEditor_ImageSizeHeader"));
                    source.Add("imageHeight", GetString("RichTextEditor_ImageHeight"));
                    source.Add("imageWidth", GetString("RichTextEditor_ImageWidth"));
                    source.Add("textPlaceholder", GetString("RichTextEditor_TextPlaceholder"));
                    source.Add("inserttablebtn", GetString("RichTextEditor_InsertTableBtn"));
                    source.Add("tabledialogHeader", GetString("RichTextEditor_TableDialogHeader"));
                    source.Add("tableWidth", GetString("RichTextEditor_TableWidth"));
                    source.Add("cellpadding", GetString("RichTextEditor_Cellpadding"));
                    source.Add("cellspacing", GetString("RichTextEditor_Cellspacing"));
                    source.Add("columns", GetString("RichTextEditor_Columns"));
                    source.Add("rows", GetString("RichTextEditor_Rows"));
                    source.Add("tableRows", GetString("RichTextEditor_TableRows"));
                    source.Add("tableColumns", GetString("RichTextEditor_TableColumns"));
                    source.Add("tableCellHorizontalAlign", GetString("RichTextEditor_TableCellHorizontalAlign"));
                    source.Add("tableCellVerticalAlign", GetString("RichTextEditor_TableCellVerticalAlign"));
                    source.Add("createTable", GetString("RichTextEditor_CreateTable"));
                    source.Add("removeTable", GetString("RichTextEditor_RemoveTable"));
                    source.Add("tableHeader", GetString("RichTextEditor_TableHeader"));
                    source.Add("tableRemove", GetString("RichTextEditor_TableRemove"));
                    source.Add("tableCellBackground", GetString("RichTextEditor_TableCellBackground"));
                    source.Add("tableEditProperties", GetString("RichTextEditor_TableEditProperties"));
                    source.Add("styles", GetString("RichTextEditor_Styles"));
                    source.Add("insertColumnLeft", GetString("RichTextEditor_InsertColumnLeft"));
                    source.Add("insertColumnRight", GetString("RichTextEditor_InsertColumnRight"));
                    source.Add("deleteColumn", GetString("RichTextEditor_DeleteColumn"));
                    source.Add("insertRowBefore", GetString("RichTextEditor_InsertRowBefore"));
                    source.Add("insertRowAfter", GetString("RichTextEditor_InsertRowAfter"));
                    source.Add("deleteRow", GetString("RichTextEditor_DeleteRow"));
                    source.Add("tableEditHeader", GetString("RichTextEditor_TableEditHeader"));
                    source.Add("TableHeadingText", GetString("RichTextEditor_TableHeadingText"));
                    source.Add("TableColText", GetString("RichTextEditor_TableColText"));
                    source.Add("imageInsertLinkHeader", GetString("RichTextEditor_ImageInsertLinkHeader"));
                    source.Add("editImageHeader", GetString("RichTextEditor_EditImageHeader"));
                    source.Add("alignmentsDropDownLeft", GetString("RichTextEditor_AlignmentsDropDownLeft"));
                    source.Add("alignmentsDropDownCenter", GetString("RichTextEditor_AlignmentsDropDownCenter"));
                    source.Add("alignmentsDropDownRight", GetString("RichTextEditor_AlignmentsDropDownRight"));
                    source.Add("alignmentsDropDownJustify", GetString("RichTextEditor_AlignmentsDropDownJustify"));
                    source.Add("imageDisplayDropDownInline", GetString("RichTextEditor_ImageDisplayDropDownInline"));
                    source.Add("imageDisplayDropDownBreak", GetString("RichTextEditor_ImageDisplayDropDownBreak"));
                    source.Add("tableInsertRowDropDownBefore", GetString("RichTextEditor_TableInsertRowDropDownBefore"));
                    source.Add("tableInsertRowDropDownAfter", GetString("RichTextEditor_TableInsertRowDropDownAfter"));
                    source.Add("tableInsertRowDropDownDelete", GetString("RichTextEditor_TableInsertRowDropDownDelete"));
                    source.Add("tableInsertColumnDropDownLeft", GetString("RichTextEditor_TableInsertColumnDropDownLeft"));
                    source.Add("tableInsertColumnDropDownRight", GetString("RichTextEditor_TableInsertColumnDropDownRight"));
                    source.Add("tableInsertColumnDropDownDelete", GetString("RichTextEditor_TableInsertColumnDropDownDelete"));
                    source.Add("tableVerticalAlignDropDownTop", GetString("RichTextEditor_TableVerticalAlignDropDownTop"));
                    source.Add("tableVerticalAlignDropDownMiddle", GetString("RichTextEditor_TableVerticalAlignDropDownMiddle"));
                    source.Add("tableVerticalAlignDropDownBottom", GetString("RichTextEditor_TableVerticalAlignDropDownBottom"));
                    source.Add("tableStylesDropDownDashedBorder", GetString("RichTextEditor_TableStylesDropDownDashedBorder"));
                    source.Add("tableStylesDropDownAlternateRows", GetString("RichTextEditor_TableStylesDropDownAlternateRows"));
                    source.Add("pasteFormat", GetString("RichTextEditor_PasteFormat"));
                    source.Add("pasteFormatContent", GetString("RichTextEditor_PasteFormatContent"));
                    source.Add("plainText", GetString("RichTextEditor_PlainText"));
                    source.Add("cleanFormat", GetString("RichTextEditor_CleanFormat"));
                    source.Add("keepFormat", GetString("RichTextEditor_KeepFormat"));
                    source.Add("pasteDialogOk", GetString("RichTextEditor_PasteDialogOk"));
                    source.Add("pasteDialogCancel", GetString("RichTextEditor_PasteDialogCancel"));
                    break;

                case "schedule":
                    source.Add("day", GetString("Schedule_Day"));
                    source.Add("week", GetString("Schedule_Week"));
                    source.Add("workWeek", GetString("Schedule_WorkWeek"));
                    source.Add("month", GetString("Schedule_Month"));
                    source.Add("agenda", GetString("Schedule_Agenda"));
                    source.Add("weekAgenda", GetString("Schedule_WeekAgenda"));
                    source.Add("workWeekAgenda", GetString("Schedule_WorkWeekAgenda"));
                    source.Add("monthAgenda", GetString("Schedule_MonthAgenda"));
                    source.Add("today", GetString("Schedule_Today"));
                    source.Add("noEvents", GetString("Schedule_NoEvents"));
                    source.Add("emptyContainer", GetString("Schedule_EmptyContainer"));
                    source.Add("allDay", GetString("Schedule_AllDay"));
                    source.Add("start", GetString("Schedule_Start"));
                    source.Add("end", GetString("Schedule_End"));
                    source.Add("more", GetString("Schedule_More"));
                    source.Add("close", GetString("Schedule_Close"));
                    source.Add("cancel", GetString("Schedule_Cancel"));
                    source.Add("noTitle", GetString("Schedule_NoTitle"));
                    source.Add("delete", GetString("Schedule_Delete"));
                    source.Add("deleteEvent", GetString("Schedule_DeleteEvent"));
                    source.Add("deleteMultipleEvent", GetString("Schedule_DeleteMultipleEvent"));
                    source.Add("selectedItems", GetString("Schedule_SelectedItems"));
                    source.Add("deleteSeries", GetString("Schedule_DeleteSeries"));
                    source.Add("edit", GetString("Schedule_Edit"));
                    source.Add("editSeries", GetString("Schedule_EditSeries"));
                    source.Add("editEvent", GetString("Schedule_EditEvent"));
                    source.Add("createEvent", GetString("Schedule_CreateEvent"));
                    source.Add("subject", GetString("Schedule_Subject"));
                    source.Add("addTitle", GetString("Schedule_AddTitle"));
                    source.Add("moreDetails", GetString("Schedule_MoreDetails"));
                    source.Add("save", GetString("Schedule_Save"));
                    source.Add("editContent", GetString("Schedule_EditContent"));
                    source.Add("deleteContent", GetString("Schedule_DeleteContent"));
                    source.Add("deleteMultipleContent", GetString("Schedule_DeleteMultipleContent"));
                    source.Add("newEvent", GetString("Schedule_NewEvent"));
                    source.Add("title", GetString("Schedule_Title"));
                    source.Add("location", GetString("Schedule_Location"));
                    source.Add("description", GetString("Schedule_Description"));
                    source.Add("timezone", GetString("Schedule_Timezone"));
                    source.Add("startTimezone", GetString("Schedule_StartTimezone"));
                    source.Add("endTimezone", GetString("Schedule_EndTimezone"));
                    source.Add("repeat", GetString("Schedule_Repeat"));
                    source.Add("saveButton", GetString("Schedule_SaveButton"));
                    source.Add("cancelButton", GetString("Schedule_CancelButton"));
                    source.Add("deleteButton", GetString("Schedule_DeleteButton"));
                    source.Add("recurrence", GetString("Schedule_Recurrence"));
                    source.Add("wrongPattern", GetString("Schedule_WrongPattern"));
                    source.Add("seriesChangeAlert", GetString("Schedule_SeriesChangeAlert"));
                    source.Add("createError", GetString("Schedule_CreateError"));
                    source.Add("sameDayAlert", GetString("Schedule_SameDayAlert"));
                    source.Add("editRecurrence", GetString("Schedule_EditRecurrence"));
                    source.Add("repeats", GetString("Schedule_Repeats"));
                    source.Add("alert", GetString("Schedule_Alert"));
                    source.Add("startEndError", GetString("Schedule_StartEndError"));
                    source.Add("invalidDateError", GetString("Schedule_InvalidDateError"));
                    source.Add("blockAlert", GetString("Schedule_BlockAlert"));
                    source.Add("ok", GetString("Schedule_Ok"));
                    source.Add("yes", GetString("Schedule_Yes"));
                    source.Add("no", GetString("Schedule_No"));
                    source.Add("occurrence", GetString("Schedule_Occurrence"));
                    source.Add("series", GetString("Schedule_Series"));
                    source.Add("previous", GetString("Schedule_Previous"));
                    source.Add("next", GetString("Schedule_next"));
                    source.Add("timelineDay", GetString("Schedule_TimelineDay"));
                    source.Add("timelineWeek", GetString("Schedule_TimelineWeek"));
                    source.Add("timelineWorkWeek", GetString("Schedule_TimelineWorkWeek"));
                    source.Add("timelineMonth", GetString("Schedule_TimelineMonth"));
                    source.Add("timelineYear", GetString("Schedule_TimelineYear"));
                    source.Add("year", GetString("Schedule_Year"));
                    source.Add("editFollowingEvent", GetString("Schedule_EditFollowingEvent"));
                    source.Add("deleteTitle", GetString("Schedule_DeleteTitle"));
                    source.Add("editTitle", GetString("Schedule_EditTitle"));
                    source.Add("beginFrom", GetString("Schedule_BeginFrom"));
                    source.Add("endAt", GetString("Schedule_EndAt"));
                    source.Add("showingEventsUntil", GetString("Schedule_ShowingEventsUntil"));
                    source.Add("lookForMore", GetString("Schedule_LookForMore"));
                    break;

                case "slider":
                    source.Add("incrementTitle", GetString("Slider_IncrementTitle"));
                    source.Add("decrementTitle", GetString("Slider_DecrementTitle"));
                    break;

                case "tab":
                    source.Add("closeButtonTitle", GetString("Tab_CloseButtonTitle"));
                    break;

                case "timepicker":
                    source.Add("placeholder", GetString("TimePicker_Placeholder"));
                    break;

                case "toast":
                    source.Add("close", GetString("Toast_Close"));
                    break;

                case "uploader":
                    source.Add("Browse", GetString("Uploader_Browse"));
                    source.Add("Clear", GetString("Uploader_Clear"));
                    source.Add("Upload", GetString("Uploader_Upload"));
                    source.Add("dropFilesHint", GetString("Uploader_DropFilesHint"));
                    source.Add("invalidMaxFileSize", GetString("Uploader_InvalidMaxFileSize"));
                    source.Add("invalidMinFileSize", GetString("Uploader_InvalidMinFileSize"));
                    source.Add("invalidFileType", GetString("Uploader_InvalidFileType"));
                    source.Add("uploadFailedMessage", GetString("Uploader_UploadFailedMessage"));
                    source.Add("uploadSuccessMessage", GetString("Uploader_UploadSuccessMessage"));
                    source.Add("removedSuccessMessage", GetString("Uploader_RemovedSuccessMessage"));
                    source.Add("removedFailedMessage", GetString("Uploader_RemovedFailedMessage"));
                    source.Add("inProgress", GetString("Uploader_InProgress"));
                    source.Add("readyToUploadMessage", GetString("Uploader_ReadyToUploadMessage"));
                    source.Add("abort", GetString("Uploader_Abort"));
                    source.Add("remove", GetString("Uploader_Remove"));
                    source.Add("cancel", GetString("Uploader_Cancel"));
                    source.Add("delete", GetString("Uploader_Delete"));
                    source.Add("pauseUpload", GetString("Uploader_PauseUpload"));
                    source.Add("pause", GetString("Uploader_Pause"));
                    source.Add("resume", GetString("Uploader_Resume"));
                    source.Add("retry", GetString("Uploader_Retry"));
                    source.Add("fileUploadCancel", GetString("Uploader_FileUploadCancel"));
                    break;
            }
            Dictionary<string, string> dictionary = source.Where(text => text.Value != null).ToDictionary(keyPare => keyPare.Key, keyPare => keyPare.Value);
            if (dictionary.Count > 0)
                componentLocale.Add(key, dictionary);
        }

        public void Dispose() => LocaleKeys = null;
    }
}